
STM32_DYPlayer_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000277c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08002904  08002904  00012904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b2c  08002b2c  00020016  2**0
                  CONTENTS
  4 .ARM          00000008  08002b2c  08002b2c  00012b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b34  08002b34  00020016  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b34  08002b34  00012b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b38  08002b38  00012b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ARM.__at_0x20000000 0000000a  2000000c  08002b48  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  00020016  2**0
                  CONTENTS
 11 .bss          00000064  20000018  20000018  00020018  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000007c  2000007c  00020018  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020016  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008d61  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000159f  00000000  00000000  00028da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000748  00000000  00000000  0002a348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000006d0  00000000  00000000  0002aa90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ff59  00000000  00000000  0002b160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000083ff  00000000  00000000  0004b0b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c232f  00000000  00000000  000534b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001157e7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00001ce8  00000000  00000000  00115838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080028ec 	.word	0x080028ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	080028ec 	.word	0x080028ec

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <serialWrite>:
  @param   : uint8_t *buffer, uint8_t len
  @return  : void
  @date	   : 30.11.22
  @brief   : Virtual method that should implement writing from the module via UART.
********************************************************************************/
void serialWrite(const uint8_t *buffer, uint8_t len) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	70fb      	strb	r3, [r7, #3]
     
	HAL_UART_Transmit(DYPLAYERUART , &buffer[0] , len , 100 );
 80004e8:	78fb      	ldrb	r3, [r7, #3]
 80004ea:	b29a      	uxth	r2, r3
 80004ec:	2364      	movs	r3, #100	; 0x64
 80004ee:	6879      	ldr	r1, [r7, #4]
 80004f0:	4803      	ldr	r0, [pc, #12]	; (8000500 <serialWrite+0x24>)
 80004f2:	f001 fdaa 	bl	800204a <HAL_UART_Transmit>
	
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000034 	.word	0x20000034

08000504 <serialWrite_crc>:
  @return  : void
  @date	   : 30.11.22
  @brief   : Map writing a single byte to the same method as writing a buffer of
             length 1. That buffer has crc value
********************************************************************************/
void serialWrite_crc(uint8_t crc) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
       
	uint8_t buf[1];
	buf[0] = crc;
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	733b      	strb	r3, [r7, #12]
		
    HAL_UART_Transmit(DYPLAYERUART, &buf[0] , 1 , 100);
 8000512:	f107 010c 	add.w	r1, r7, #12
 8000516:	2364      	movs	r3, #100	; 0x64
 8000518:	2201      	movs	r2, #1
 800051a:	4803      	ldr	r0, [pc, #12]	; (8000528 <serialWrite_crc+0x24>)
 800051c:	f001 fd95 	bl	800204a <HAL_UART_Transmit>
}
 8000520:	bf00      	nop
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000034 	.word	0x20000034

0800052c <serialRead>:
  @param   : uint8_t *buffer, uint8_t len
  @return  : uint8_t
  @date	   : 30.11.22
  @brief   : Virtual method that should implement reading from the module via UART.
********************************************************************************/
uint8_t serialRead(uint8_t *buffer, uint8_t len) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	460b      	mov	r3, r1
 8000536:	70fb      	strb	r3, [r7, #3]

	HAL_UART_Receive(DYPLAYERUART, &buffer[0], len, 100);
 8000538:	78fb      	ldrb	r3, [r7, #3]
 800053a:	b29a      	uxth	r2, r3
 800053c:	2364      	movs	r3, #100	; 0x64
 800053e:	6879      	ldr	r1, [r7, #4]
 8000540:	4803      	ldr	r0, [pc, #12]	; (8000550 <serialRead+0x24>)
 8000542:	f001 fe14 	bl	800216e <HAL_UART_Receive>

    return true;
 8000546:	2301      	movs	r3, #1
}
 8000548:	4618      	mov	r0, r3
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000034 	.word	0x20000034

08000554 <checksum>:
  @param   : uint8_t *data, uint8_t len
  @return  : uint8_t
  @date	   : 30.11.22
  @brief   : Calculate the sum of all bytes in a buffer as a simple "CRC".
********************************************************************************/
uint8_t  checksum(uint8_t *data, uint8_t len) {
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	460b      	mov	r3, r1
 800055e:	70fb      	strb	r3, [r7, #3]
    uint8_t sum = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i=0; i < len; i++) {
 8000564:	2300      	movs	r3, #0
 8000566:	73bb      	strb	r3, [r7, #14]
 8000568:	e009      	b.n	800057e <checksum+0x2a>
      sum = sum + data[i];
 800056a:	7bbb      	ldrb	r3, [r7, #14]
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	4413      	add	r3, r2
 8000570:	781a      	ldrb	r2, [r3, #0]
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	4413      	add	r3, r2
 8000576:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i=0; i < len; i++) {
 8000578:	7bbb      	ldrb	r3, [r7, #14]
 800057a:	3301      	adds	r3, #1
 800057c:	73bb      	strb	r3, [r7, #14]
 800057e:	7bba      	ldrb	r2, [r7, #14]
 8000580:	78fb      	ldrb	r3, [r7, #3]
 8000582:	429a      	cmp	r2, r3
 8000584:	d3f1      	bcc.n	800056a <checksum+0x16>
    }
    return sum;
 8000586:	7bfb      	ldrb	r3, [r7, #15]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3714      	adds	r7, #20
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <validateCrc>:
  @param   : uint8_t *data, uint8_t len
  @return  : bool
  @date	   : 30.11.22
  @brief   : Validate data buffer with CRC byte (last byte should be the CRC byte).
********************************************************************************/
bool validateCrc(uint8_t *data, uint8_t len) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = data[len - 1];
 80005a0:	78fb      	ldrb	r3, [r7, #3]
 80005a2:	3b01      	subs	r3, #1
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	4413      	add	r3, r2
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	73fb      	strb	r3, [r7, #15]
    return checksum(data, len - 1) == crc;
 80005ac:	78fb      	ldrb	r3, [r7, #3]
 80005ae:	3b01      	subs	r3, #1
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	4619      	mov	r1, r3
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f7ff ffcd 	bl	8000554 <checksum>
 80005ba:	4603      	mov	r3, r0
 80005bc:	461a      	mov	r2, r3
 80005be:	7bfb      	ldrb	r3, [r7, #15]
 80005c0:	4293      	cmp	r3, r2
 80005c2:	bf0c      	ite	eq
 80005c4:	2301      	moveq	r3, #1
 80005c6:	2300      	movne	r3, #0
 80005c8:	b2db      	uxtb	r3, r3
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <sendCommand_nocrc>:
  @param   : void
  @return  : uint8_t *data, uint8_t len
  @date	   : 30.11.22
  @brief   : Send a command to the module, adds a CRC to the passed buffer.
********************************************************************************/
void sendCommand_nocrc(uint8_t *data, uint8_t len) {
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b084      	sub	sp, #16
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
 80005da:	460b      	mov	r3, r1
 80005dc:	70fb      	strb	r3, [r7, #3]

    uint8_t crc = checksum(data, len);
 80005de:	78fb      	ldrb	r3, [r7, #3]
 80005e0:	4619      	mov	r1, r3
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f7ff ffb6 	bl	8000554 <checksum>
 80005e8:	4603      	mov	r3, r0
 80005ea:	73fb      	strb	r3, [r7, #15]
    serialWrite(data, len);
 80005ec:	78fb      	ldrb	r3, [r7, #3]
 80005ee:	4619      	mov	r1, r3
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f7ff ff73 	bl	80004dc <serialWrite>
    serialWrite_crc(crc);
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ff83 	bl	8000504 <serialWrite_crc>
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <sendCommand>:
  @param   : uint8_t *data, uint8_t len, uint8_t crc
  @return  : void
  @date	   : 30.11.22
  @brief   : data pointer to bytes to send to the module.
********************************************************************************/
void sendCommand (const uint8_t *data, uint8_t len, uint8_t crc) {
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
 800060e:	460b      	mov	r3, r1
 8000610:	70fb      	strb	r3, [r7, #3]
 8000612:	4613      	mov	r3, r2
 8000614:	70bb      	strb	r3, [r7, #2]
    serialWrite(data, len);
 8000616:	78fb      	ldrb	r3, [r7, #3]
 8000618:	4619      	mov	r1, r3
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff ff5e 	bl	80004dc <serialWrite>
    serialWrite_crc(crc);
 8000620:	78bb      	ldrb	r3, [r7, #2]
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ff6e 	bl	8000504 <serialWrite_crc>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <getResponse>:
  @return  : bool
  @date	   : 30.11.22
  @brief   : Get a response to a command.
        	 Reads data from UART, validates the CRC, and puts it in the buffer.
********************************************************************************/
bool getResponse(uint8_t *buffer, uint8_t len) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	460b      	mov	r3, r1
 800063a:	70fb      	strb	r3, [r7, #3]
    if (serialRead(buffer, len) > 0) {
 800063c:	78fb      	ldrb	r3, [r7, #3]
 800063e:	4619      	mov	r1, r3
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff ff73 	bl	800052c <serialRead>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d009      	beq.n	8000660 <getResponse+0x30>
      if (DYPlayer.validateCrc(buffer, len)) {
 800064c:	4a07      	ldr	r2, [pc, #28]	; (800066c <getResponse+0x3c>)
 800064e:	78fb      	ldrb	r3, [r7, #3]
 8000650:	4619      	mov	r1, r3
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	4790      	blx	r2
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <getResponse+0x30>
        return true;
 800065c:	2301      	movs	r3, #1
 800065e:	e000      	b.n	8000662 <getResponse+0x32>
      }
    }
    return false;
 8000660:	2300      	movs	r3, #0
}
 8000662:	4618      	mov	r0, r3
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	08000595 	.word	0x08000595

08000670 <byPathCommand>:

             E.g.: /SONGS1/FILE1.MP3 should become: /SONGS1﹡/FILE1*MP3
             NOTE: This comment uses a unicode * look-a-alike (﹡) because ﹡/ end the
             comment.
********************************************************************************/
void byPathCommand(uint8_t command, device_t device, char *path) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b090      	sub	sp, #64	; 0x40
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	603a      	str	r2, [r7, #0]
 800067a:	71fb      	strb	r3, [r7, #7]
 800067c:	460b      	mov	r3, r1
 800067e:	71bb      	strb	r3, [r7, #6]
    uint8_t len = strlen(path);
 8000680:	6838      	ldr	r0, [r7, #0]
 8000682:	f7ff fda1 	bl	80001c8 <strlen>
 8000686:	4603      	mov	r3, r0
 8000688:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (len < 1) return;
 800068c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000690:	2b00      	cmp	r3, #0
 8000692:	f000 808d 	beq.w	80007b0 <byPathCommand+0x140>
    uint8_t _len = len;
 8000696:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800069a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    // Count / in path and, except root slash and determine new length
    for (uint8_t i = 1; i < len; i++) {
 800069e:	2301      	movs	r3, #1
 80006a0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80006a4:	e010      	b.n	80006c8 <byPathCommand+0x58>
      if (path[i] == '/')
 80006a6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80006aa:	683a      	ldr	r2, [r7, #0]
 80006ac:	4413      	add	r3, r2
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b2f      	cmp	r3, #47	; 0x2f
 80006b2:	d104      	bne.n	80006be <byPathCommand+0x4e>
        _len++;
 80006b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80006b8:	3301      	adds	r3, #1
 80006ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    for (uint8_t i = 1; i < len; i++) {
 80006be:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80006c2:	3301      	adds	r3, #1
 80006c4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80006c8:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80006cc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d3e8      	bcc.n	80006a6 <byPathCommand+0x36>
    uint8_t *_command = new uint8_t[_len + 4];
    #else
    uint8_t _command[DY_PATH_LEN+4];
    #endif

    _command[0] = 0xaa;
 80006d4:	23aa      	movs	r3, #170	; 0xaa
 80006d6:	733b      	strb	r3, [r7, #12]
    _command[1] = command;
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	737b      	strb	r3, [r7, #13]
    _command[2] = _len + 1;
 80006dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80006e0:	3301      	adds	r3, #1
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	73bb      	strb	r3, [r7, #14]
    _command[3] = (uint8_t) device;
 80006e6:	79bb      	ldrb	r3, [r7, #6]
 80006e8:	73fb      	strb	r3, [r7, #15]
    _command[4] = path[0];
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	743b      	strb	r3, [r7, #16]
    uint8_t j = 5;
 80006f0:	2305      	movs	r3, #5
 80006f2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    for (uint8_t i = 1; i < len; i++) {
 80006f6:	2301      	movs	r3, #1
 80006f8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80006fc:	e047      	b.n	800078e <byPathCommand+0x11e>
      switch(path[i]) {
 80006fe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000702:	683a      	ldr	r2, [r7, #0]
 8000704:	4413      	add	r3, r2
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b2e      	cmp	r3, #46	; 0x2e
 800070a:	d002      	beq.n	8000712 <byPathCommand+0xa2>
 800070c:	2b2f      	cmp	r3, #47	; 0x2f
 800070e:	d008      	beq.n	8000722 <byPathCommand+0xb2>
 8000710:	e013      	b.n	800073a <byPathCommand+0xca>
        case '.':
          _command[j] = '*';
 8000712:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000716:	3340      	adds	r3, #64	; 0x40
 8000718:	443b      	add	r3, r7
 800071a:	222a      	movs	r2, #42	; 0x2a
 800071c:	f803 2c34 	strb.w	r2, [r3, #-52]
          break;
 8000720:	e02b      	b.n	800077a <byPathCommand+0x10a>
        case '/':
          _command[j] = '*';
 8000722:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000726:	3340      	adds	r3, #64	; 0x40
 8000728:	443b      	add	r3, r7
 800072a:	222a      	movs	r2, #42	; 0x2a
 800072c:	f803 2c34 	strb.w	r2, [r3, #-52]
          j++;
 8000730:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000734:	3301      	adds	r3, #1
 8000736:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
          // fall-through
        default:
          _command[j] = toupper(path[i]);
 800073a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800073e:	683a      	ldr	r2, [r7, #0]
 8000740:	4413      	add	r3, r2
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8000748:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800074c:	3301      	adds	r3, #1
 800074e:	4a1a      	ldr	r2, [pc, #104]	; (80007b8 <byPathCommand+0x148>)
 8000750:	4413      	add	r3, r2
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	f003 0303 	and.w	r3, r3, #3
 8000758:	2b02      	cmp	r3, #2
 800075a:	d103      	bne.n	8000764 <byPathCommand+0xf4>
 800075c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000760:	3b20      	subs	r3, #32
 8000762:	e001      	b.n	8000768 <byPathCommand+0xf8>
 8000764:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000768:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800076c:	b2d9      	uxtb	r1, r3
 800076e:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8000772:	443b      	add	r3, r7
 8000774:	460a      	mov	r2, r1
 8000776:	f803 2c34 	strb.w	r2, [r3, #-52]
      }
      j++;
 800077a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800077e:	3301      	adds	r3, #1
 8000780:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    for (uint8_t i = 1; i < len; i++) {
 8000784:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000788:	3301      	adds	r3, #1
 800078a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800078e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8000792:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000796:	429a      	cmp	r2, r3
 8000798:	d3b1      	bcc.n	80006fe <byPathCommand+0x8e>
    }
    sendCommand_nocrc(_command, len + 4);
 800079a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800079e:	3304      	adds	r3, #4
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	4611      	mov	r1, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff12 	bl	80005d2 <sendCommand_nocrc>
 80007ae:	e000      	b.n	80007b2 <byPathCommand+0x142>
    if (len < 1) return;
 80007b0:	bf00      	nop
    #ifdef DY_PATHS_IN_HEAP
    delete[] _command;
    #endif
}
 80007b2:	3740      	adds	r7, #64	; 0x40
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	08002a28 	.word	0x08002a28

080007bc <checkPlayState>:
  @param   : void
  @return  : play_state_t
  @date	   : 30.11.22
  @brief   : Check the current play state can, be called at any time.
********************************************************************************/
play_state_t checkPlayState(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
	/*
    uint8_t command[3] = { 0xaa, 0x01, 0x00 };
     sendCommand(command, 3, 0xab);
    */

    sendCommand( &controlCommands[QPLAY_CMD][0]            ,
 80007c2:	23ab      	movs	r3, #171	; 0xab
 80007c4:	461a      	mov	r2, r3
 80007c6:	2103      	movs	r1, #3
 80007c8:	4809      	ldr	r0, [pc, #36]	; (80007f0 <checkPlayState+0x34>)
 80007ca:	f7ff ff1c 	bl	8000606 <sendCommand>
    			 LENGTHOF_COMMANDS				  		  ,
				 controlCommands[QPLAY_CMD][CMD_CRC_INDEX] );

    uint8_t buffer[6];
    if (DYPlayer.getResponse(buffer, 6)) {
 80007ce:	4a09      	ldr	r2, [pc, #36]	; (80007f4 <checkPlayState+0x38>)
 80007d0:	463b      	mov	r3, r7
 80007d2:	2106      	movs	r1, #6
 80007d4:	4618      	mov	r0, r3
 80007d6:	4790      	blx	r2
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d002      	beq.n	80007e4 <checkPlayState+0x28>
      return (play_state_t) buffer[3];
 80007de:	78fb      	ldrb	r3, [r7, #3]
 80007e0:	b25b      	sxtb	r3, r3
 80007e2:	e001      	b.n	80007e8 <checkPlayState+0x2c>
    }
    //return (play_state_t) PlayState.Fail;
    return Fail; //Fudge
 80007e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	080029cc 	.word	0x080029cc
 80007f4:	08000631 	.word	0x08000631

080007f8 <play>:
  @param   : void
  @return  : void
  @date	   : 30.11.22
  @brief   : Play the currently selected file from the start.
********************************************************************************/
void play(void) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	/*
    uint8_t command[3] = {0xaa, 0x02, 0x00};
    */

    sendCommand( &controlCommands[PLAY_CMD][0]            ,
 80007fc:	23ac      	movs	r3, #172	; 0xac
 80007fe:	461a      	mov	r2, r3
 8000800:	2103      	movs	r1, #3
 8000802:	4802      	ldr	r0, [pc, #8]	; (800080c <play+0x14>)
 8000804:	f7ff feff 	bl	8000606 <sendCommand>
    			 LENGTHOF_COMMANDS				  		  ,
				 controlCommands[PLAY_CMD][CMD_CRC_INDEX] );
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	080029a4 	.word	0x080029a4

08000810 <pause>:
  @param   : void
  @return  : void
  @date	   : 30.11.22
  @brief   : Set the play state to paused.
********************************************************************************/
void pause() {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	/*
    uint8_t command[3] = {0xaa, 0x03, 0x00};
    */

    sendCommand( &controlCommands[PAUSE_CMD][0]            ,
 8000814:	23ad      	movs	r3, #173	; 0xad
 8000816:	461a      	mov	r2, r3
 8000818:	2103      	movs	r1, #3
 800081a:	4802      	ldr	r0, [pc, #8]	; (8000824 <pause+0x14>)
 800081c:	f7ff fef3 	bl	8000606 <sendCommand>
    			 LENGTHOF_COMMANDS				  		   ,
				 controlCommands[PAUSE_CMD][CMD_CRC_INDEX] );

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	080029a8 	.word	0x080029a8

08000828 <stop>:
  @param   : void
  @return  : void
  @date	   : 30.11.22
  @brief   : Set the play state to stopped.
********************************************************************************/
void stop() {
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /*
  uint8_t command[3] = {0xaa, 0x04, 0x00};
  */

    sendCommand( &controlCommands[STOP_CMD][0]            ,
 800082c:	23ae      	movs	r3, #174	; 0xae
 800082e:	461a      	mov	r2, r3
 8000830:	2103      	movs	r1, #3
 8000832:	4802      	ldr	r0, [pc, #8]	; (800083c <stop+0x14>)
 8000834:	f7ff fee7 	bl	8000606 <sendCommand>
    			 LENGTHOF_COMMANDS				  		  ,
				 controlCommands[STOP_CMD][CMD_CRC_INDEX] );
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	080029ac 	.word	0x080029ac

08000840 <previous>:
  @param   : void
  @return  : void
  @date	   : 30.11.22
  @brief   : Play the previous file.
********************************************************************************/
void previous() {
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /*
  uint8_t command[3] = {0xaa, 0x05, 0x00};
  */
    sendCommand( &controlCommands[PREV_CMD][0]             ,
 8000844:	23af      	movs	r3, #175	; 0xaf
 8000846:	461a      	mov	r2, r3
 8000848:	2103      	movs	r1, #3
 800084a:	4802      	ldr	r0, [pc, #8]	; (8000854 <previous+0x14>)
 800084c:	f7ff fedb 	bl	8000606 <sendCommand>
    			 LENGTHOF_COMMANDS				  		   ,
				 controlCommands[PREV_CMD][CMD_CRC_INDEX] );
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	080029b0 	.word	0x080029b0

08000858 <next>:
  @param   : void
  @return  : void
  @date	   : 30.11.22
  @brief   : Play the next file.
********************************************************************************/
void next() {
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /*
  uint8_t command[3] = {0xaa, 0x06, 0x00};
  */

    sendCommand( &controlCommands[PREV_CMD][0]             ,
 800085c:	23af      	movs	r3, #175	; 0xaf
 800085e:	461a      	mov	r2, r3
 8000860:	2103      	movs	r1, #3
 8000862:	4802      	ldr	r0, [pc, #8]	; (800086c <next+0x14>)
 8000864:	f7ff fecf 	bl	8000606 <sendCommand>
    			 LENGTHOF_COMMANDS				  		   ,
				 controlCommands[PREV_CMD][CMD_CRC_INDEX] );
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	080029b0 	.word	0x080029b0

08000870 <playSpecified>:
  @param   : void
  @return  : void
  @date	   : 30.11.22
  @brief   :
********************************************************************************/
void playSpecified(uint16_t number) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	80fb      	strh	r3, [r7, #6]
  /*
  uint8_t command[5] = { 0xaa, 0x07, 0x02, 0x00, 0x00 };
  */
  uint8_t command[5] = {0};
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	2300      	movs	r3, #0
 8000880:	733b      	strb	r3, [r7, #12]

  memcpy( &command[0] ,
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	2203      	movs	r2, #3
 8000888:	490a      	ldr	r1, [pc, #40]	; (80008b4 <playSpecified+0x44>)
 800088a:	4618      	mov	r0, r3
 800088c:	f002 f818 	bl	80028c0 <memcpy>
		  &controlCommands[SPECIFIEDSONG_CMD][0],
		  LENGTHOF_COMMANDS);

  command[3] = number >> 8;
 8000890:	88fb      	ldrh	r3, [r7, #6]
 8000892:	0a1b      	lsrs	r3, r3, #8
 8000894:	b29b      	uxth	r3, r3
 8000896:	b2db      	uxtb	r3, r3
 8000898:	72fb      	strb	r3, [r7, #11]
  command[4] = number & 0xff;
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	733b      	strb	r3, [r7, #12]
  sendCommand_nocrc(command, 5);
 80008a0:	f107 0308 	add.w	r3, r7, #8
 80008a4:	2105      	movs	r1, #5
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fe93 	bl	80005d2 <sendCommand_nocrc>
}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	080029f8 	.word	0x080029f8

080008b8 <playSpecifiedDevicePath>:
  @param   : device_t device, char *path
  @return  : void
  @date	   : 30.11.22
  @brief   : Play a sound file by number, number sent as 2 bytes.
********************************************************************************/
void playSpecifiedDevicePath(device_t device, char *path) {
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	6039      	str	r1, [r7, #0]
 80008c2:	71fb      	strb	r3, [r7, #7]
  DYPlayer.byPathCommand(0x08, device, path);
 80008c4:	4c04      	ldr	r4, [pc, #16]	; (80008d8 <playSpecifiedDevicePath+0x20>)
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	683a      	ldr	r2, [r7, #0]
 80008ca:	4619      	mov	r1, r3
 80008cc:	2008      	movs	r0, #8
 80008ce:	47a0      	blx	r4
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd90      	pop	{r4, r7, pc}
 80008d8:	08000671 	.word	0x08000671

080008dc <getPlayingDevice>:
  @param   : void
  @return  : device_t
  @date	   : 30.11.22
  @brief   : Get the storage device that is currently used for playing sound files.
********************************************************************************/
device_t getPlayingDevice(void) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
/*
  uint8_t command[3] = { 0xaa, 0x0a, 0x00 };
  sendCommand(command, 3, 0xb4);
*/

  sendCommand( &controlCommands[QCURRENTPLAY_CMD][0]            ,
 80008e2:	23b4      	movs	r3, #180	; 0xb4
 80008e4:	461a      	mov	r2, r3
 80008e6:	2103      	movs	r1, #3
 80008e8:	4808      	ldr	r0, [pc, #32]	; (800090c <getPlayingDevice+0x30>)
 80008ea:	f7ff fe8c 	bl	8000606 <sendCommand>
    		   LENGTHOF_COMMANDS				  		   		,
			   controlCommands[QCURRENTPLAY_CMD][CMD_CRC_INDEX] );

  uint8_t buffer[5];
  if (DYPlayer.getResponse(buffer, 5)) {
 80008ee:	4a08      	ldr	r2, [pc, #32]	; (8000910 <getPlayingDevice+0x34>)
 80008f0:	463b      	mov	r3, r7
 80008f2:	2105      	movs	r1, #5
 80008f4:	4618      	mov	r0, r3
 80008f6:	4790      	blx	r2
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <getPlayingDevice+0x26>
    return (device_t)buffer[3];
 80008fe:	78fb      	ldrb	r3, [r7, #3]
 8000900:	e000      	b.n	8000904 <getPlayingDevice+0x28>
  }
  return Failed;
 8000902:	23fe      	movs	r3, #254	; 0xfe
}
 8000904:	4618      	mov	r0, r3
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	080029d4 	.word	0x080029d4
 8000910:	08000631 	.word	0x08000631

08000914 <setPlayingDevice>:
  @date	   : 30.11.22
  @brief   : Set the device number the module should use.
     		 Tries to set the device but no guarantee is given, use `getDevice()`
     		 to check the actual current storage device.
********************************************************************************/
void setPlayingDevice(device_t device) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
  /*
  uint8_t command[4] = { 0xaa, 0x0b, 0x01, 0x00 };
  */

  uint8_t command[4] = {0};
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]

  memcpy( &command[0] ,
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	2203      	movs	r2, #3
 8000928:	4907      	ldr	r1, [pc, #28]	; (8000948 <setPlayingDevice+0x34>)
 800092a:	4618      	mov	r0, r3
 800092c:	f001 ffc8 	bl	80028c0 <memcpy>
		  &controlCommands[SWTICHDRIVE_CMD][0],
		  LENGTHOF_COMMANDS);

  command[3] = (uint8_t) device;
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	73fb      	strb	r3, [r7, #15]
  sendCommand_nocrc(command, 4);
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	2104      	movs	r1, #4
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fe49 	bl	80005d2 <sendCommand_nocrc>
}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	08002a00 	.word	0x08002a00

0800094c <getSoundCount>:
  @param   : void
  @return  : uint16_t
  @date	   : 30.11.22
  @brief   : Get the amount of sound files on the current storage device.
********************************************************************************/
uint16_t getSoundCount(void) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
/*
  uint8_t command[3] = { 0xaa, 0x0c, 0x00 };
  sendCommand(command, 3, 0xb6);
*/

  sendCommand( &controlCommands[QNUMBEROFSONG_CMD][0]            ,
 8000952:	23b6      	movs	r3, #182	; 0xb6
 8000954:	461a      	mov	r2, r3
 8000956:	2103      	movs	r1, #3
 8000958:	480c      	ldr	r0, [pc, #48]	; (800098c <getSoundCount+0x40>)
 800095a:	f7ff fe54 	bl	8000606 <sendCommand>
    		   LENGTHOF_COMMANDS				  		   		 ,
			   controlCommands[QNUMBEROFSONG_CMD][CMD_CRC_INDEX] );

  uint8_t buffer[6];
  if(DYPlayer.getResponse(buffer, 6)) {
 800095e:	4a0c      	ldr	r2, [pc, #48]	; (8000990 <getSoundCount+0x44>)
 8000960:	463b      	mov	r3, r7
 8000962:	2106      	movs	r1, #6
 8000964:	4618      	mov	r0, r3
 8000966:	4790      	blx	r2
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d008      	beq.n	8000980 <getSoundCount+0x34>
    return (buffer[3] << 8) | buffer[4];
 800096e:	78fb      	ldrb	r3, [r7, #3]
 8000970:	021b      	lsls	r3, r3, #8
 8000972:	b21a      	sxth	r2, r3
 8000974:	793b      	ldrb	r3, [r7, #4]
 8000976:	b21b      	sxth	r3, r3
 8000978:	4313      	orrs	r3, r2
 800097a:	b21b      	sxth	r3, r3
 800097c:	b29b      	uxth	r3, r3
 800097e:	e000      	b.n	8000982 <getSoundCount+0x36>
  }
  return 0;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	080029d8 	.word	0x080029d8
 8000990:	08000631 	.word	0x08000631

08000994 <getPlayingSound>:
  @param   : void
  @return  : uint16_t
  @date	   : 30.11.22
  @brief   : Get the currently playing file by number.
********************************************************************************/
uint16_t getPlayingSound(void) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
/*
  uint8_t command[3] = { 0xaa, 0x0d, 0x00 };
  sendCommand(command, 3, 0xb7);
*/

  sendCommand( &controlCommands[QCURRENTSONG_CMD][0]            ,
 800099a:	23b7      	movs	r3, #183	; 0xb7
 800099c:	461a      	mov	r2, r3
 800099e:	2103      	movs	r1, #3
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <getPlayingSound+0x40>)
 80009a2:	f7ff fe30 	bl	8000606 <sendCommand>
	    	   LENGTHOF_COMMANDS				  		   		 ,
			   controlCommands[QCURRENTSONG_CMD][CMD_CRC_INDEX] );

  uint8_t buffer[6];
  if(DYPlayer.getResponse(buffer, 6)) {
 80009a6:	4a0c      	ldr	r2, [pc, #48]	; (80009d8 <getPlayingSound+0x44>)
 80009a8:	463b      	mov	r3, r7
 80009aa:	2106      	movs	r1, #6
 80009ac:	4618      	mov	r0, r3
 80009ae:	4790      	blx	r2
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d008      	beq.n	80009c8 <getPlayingSound+0x34>
    return (buffer[3] << 8) | buffer[4];
 80009b6:	78fb      	ldrb	r3, [r7, #3]
 80009b8:	021b      	lsls	r3, r3, #8
 80009ba:	b21a      	sxth	r2, r3
 80009bc:	793b      	ldrb	r3, [r7, #4]
 80009be:	b21b      	sxth	r3, r3
 80009c0:	4313      	orrs	r3, r2
 80009c2:	b21b      	sxth	r3, r3
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	e000      	b.n	80009ca <getPlayingSound+0x36>
  }
  return 0;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	080029dc 	.word	0x080029dc
 80009d8:	08000631 	.word	0x08000631

080009dc <previousDir>:
  @param   : playDirSound_t song
  @return  : void
  @date	   : 30.11.22
  @brief   : Select previous directory and start playing the first or last song.
********************************************************************************/
void previousDir (playDirSound_t song) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
 if (song == LastSound)
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d106      	bne.n	80009fa <previousDir+0x1e>
 {
    /*
    uint8_t command[3] = { 0xaa, 0x0e, 0x00 };
    sendCommand(command, 3, 0xb8);
    */
    sendCommand( &controlCommands[PREV_FILE][0]            ,
 80009ec:	23b8      	movs	r3, #184	; 0xb8
 80009ee:	461a      	mov	r2, r3
 80009f0:	2103      	movs	r1, #3
 80009f2:	4807      	ldr	r0, [pc, #28]	; (8000a10 <previousDir+0x34>)
 80009f4:	f7ff fe07 	bl	8000606 <sendCommand>
	sendCommand( &controlCommands[NEXT_FILE][0]            ,
	      		 LENGTHOF_COMMANDS				  		   		 ,
	      		 controlCommands[NEXT_FILE][CMD_CRC_INDEX] );

  }
}
 80009f8:	e005      	b.n	8000a06 <previousDir+0x2a>
	sendCommand( &controlCommands[NEXT_FILE][0]            ,
 80009fa:	23b9      	movs	r3, #185	; 0xb9
 80009fc:	461a      	mov	r2, r3
 80009fe:	2103      	movs	r1, #3
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <previousDir+0x38>)
 8000a02:	f7ff fe00 	bl	8000606 <sendCommand>
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	080029c0 	.word	0x080029c0
 8000a14:	080029c4 	.word	0x080029c4

08000a18 <getFirstInDir>:
  @param   : void
  @return  : uint16_t
  @date	   : 30.11.22
  @brief   : Get number of the first song in the currently selected directory.
********************************************************************************/
uint16_t getFirstInDir(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
  /*
  uint8_t command[3] = { 0xaa, 0x11, 0x00 };
  sendCommand(command, 3, 0xbb);
  */

   sendCommand( &controlCommands[QFOLDERDIR_CMD][0]            ,
 8000a1e:	23bb      	movs	r3, #187	; 0xbb
 8000a20:	461a      	mov	r2, r3
 8000a22:	2103      	movs	r1, #3
 8000a24:	480c      	ldr	r0, [pc, #48]	; (8000a58 <getFirstInDir+0x40>)
 8000a26:	f7ff fdee 	bl	8000606 <sendCommand>
		      	LENGTHOF_COMMANDS				  		   		 ,
		      	controlCommands[QFOLDERDIR_CMD][CMD_CRC_INDEX] );

  uint8_t buffer[6];
  if(DYPlayer.getResponse(buffer, 6)) {
 8000a2a:	4a0c      	ldr	r2, [pc, #48]	; (8000a5c <getFirstInDir+0x44>)
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	2106      	movs	r1, #6
 8000a30:	4618      	mov	r0, r3
 8000a32:	4790      	blx	r2
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d008      	beq.n	8000a4c <getFirstInDir+0x34>
    return (buffer[3] << 8) | buffer[4];
 8000a3a:	78fb      	ldrb	r3, [r7, #3]
 8000a3c:	021b      	lsls	r3, r3, #8
 8000a3e:	b21a      	sxth	r2, r3
 8000a40:	793b      	ldrb	r3, [r7, #4]
 8000a42:	b21b      	sxth	r3, r3
 8000a44:	4313      	orrs	r3, r2
 8000a46:	b21b      	sxth	r3, r3
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	e000      	b.n	8000a4e <getFirstInDir+0x36>
  }
  return 0;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	080029e0 	.word	0x080029e0
 8000a5c:	08000631 	.word	0x08000631

08000a60 <getSoundCountDir>:
  @param   : void
  @return  : uint16_t
  @date	   : 30.11.22
  @brief   : Get the amount of sound files in the currently selected directory.
********************************************************************************/
uint16_t getSoundCountDir(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
  /*
  uint8_t command[3] = { 0xaa, 0x12, 0x00 };
  sendCommand(command, 3, 0xbc);
  */

  sendCommand( &controlCommands[QFOLDERNUMBER_CMD][0]            ,
 8000a66:	23bc      	movs	r3, #188	; 0xbc
 8000a68:	461a      	mov	r2, r3
 8000a6a:	2103      	movs	r1, #3
 8000a6c:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <getSoundCountDir+0x40>)
 8000a6e:	f7ff fdca 	bl	8000606 <sendCommand>
	      	   LENGTHOF_COMMANDS				 		 ,
	      	   controlCommands[QFOLDERNUMBER_CMD][CMD_CRC_INDEX] );

  uint8_t buffer[6];
  if(DYPlayer.getResponse(buffer, 6)) {
 8000a72:	4a0c      	ldr	r2, [pc, #48]	; (8000aa4 <getSoundCountDir+0x44>)
 8000a74:	463b      	mov	r3, r7
 8000a76:	2106      	movs	r1, #6
 8000a78:	4618      	mov	r0, r3
 8000a7a:	4790      	blx	r2
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d008      	beq.n	8000a94 <getSoundCountDir+0x34>
    return (buffer[3] << 8) | buffer[4];
 8000a82:	78fb      	ldrb	r3, [r7, #3]
 8000a84:	021b      	lsls	r3, r3, #8
 8000a86:	b21a      	sxth	r2, r3
 8000a88:	793b      	ldrb	r3, [r7, #4]
 8000a8a:	b21b      	sxth	r3, r3
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	b21b      	sxth	r3, r3
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	e000      	b.n	8000a96 <getSoundCountDir+0x36>
  }
  return 0;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	080029e4 	.word	0x080029e4
 8000aa4:	08000631 	.word	0x08000631

08000aa8 <setVolume>:
  @return  : void
  @date	   : 30.11.22
  @brief   : Set the playback volume between 0 and 30.
  	  	  	 Default volume if not set: 20.
********************************************************************************/
void setVolume(uint8_t volume) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
  /*
  uint8_t command[4] = { 0xaa, 0x13, 0x01, 0x00 };
  */

  uint8_t command[4] = {0};
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]

  memcpy( &command[0] ,
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	2203      	movs	r2, #3
 8000abc:	4907      	ldr	r1, [pc, #28]	; (8000adc <setVolume+0x34>)
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 fefe 	bl	80028c0 <memcpy>
		  &controlCommands[SETVOLUME_CMD][0],
		  LENGTHOF_COMMANDS);

  command[3] = volume;
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	73fb      	strb	r3, [r7, #15]
  sendCommand_nocrc(command, 4);
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	2104      	movs	r1, #4
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fd7f 	bl	80005d2 <sendCommand_nocrc>
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	080029e8 	.word	0x080029e8

08000ae0 <volumeIncrease>:
  @param   : void
  @return  : void
  @date	   : 30.11.22
  @brief   : Increase the volume.
********************************************************************************/
void volumeIncrease(void) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /*
  uint8_t command[3] = {0xaa, 0x14, 0x00};
  sendCommand(command, 3, 0xbe);
  */
  sendCommand( &controlCommands[VOLUME_INC][0]             ,
 8000ae4:	23be      	movs	r3, #190	; 0xbe
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	2103      	movs	r1, #3
 8000aea:	4802      	ldr	r0, [pc, #8]	; (8000af4 <volumeIncrease+0x14>)
 8000aec:	f7ff fd8b 	bl	8000606 <sendCommand>
		      	LENGTHOF_COMMANDS				  		   ,
		      	controlCommands[VOLUME_INC][CMD_CRC_INDEX] );

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	080029b8 	.word	0x080029b8

08000af8 <volumeDecrease>:
  @param   : void
  @return  : void
  @date	   : 30.11.22
  @brief   : Decrease the volume.
********************************************************************************/
void volumeDecrease(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /*
  uint8_t command[3] = {0xaa, 0x15, 0x00};
  sendCommand(command, 3, 0xbf);
  */

  sendCommand( &controlCommands[VOLUME_DEC][0]             ,
 8000afc:	23bf      	movs	r3, #191	; 0xbf
 8000afe:	461a      	mov	r2, r3
 8000b00:	2103      	movs	r1, #3
 8000b02:	4802      	ldr	r0, [pc, #8]	; (8000b0c <volumeDecrease+0x14>)
 8000b04:	f7ff fd7f 	bl	8000606 <sendCommand>
			   LENGTHOF_COMMANDS				  		   ,
			   controlCommands[VOLUME_DEC][CMD_CRC_INDEX] );
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	080029bc 	.word	0x080029bc

08000b10 <interludeSpecified>:
             Note from the manual: "Music interlude" only has level 1. Continuous
             interlude will cover the previous interlude (the interlude will be
             played immediately). When the interlude is finished, it will return to
             the first interlude breakpoint and continue to play.
********************************************************************************/
void interludeSpecified(device_t device, uint16_t number) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	460a      	mov	r2, r1
 8000b1a:	71fb      	strb	r3, [r7, #7]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	80bb      	strh	r3, [r7, #4]

  uint8_t command[6] = { 0xaa, 0x0b, 0x03, 0x00, 0x00, 0x00 };
 8000b20:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <interludeSpecified+0x48>)
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b2a:	6018      	str	r0, [r3, #0]
 8000b2c:	3304      	adds	r3, #4
 8000b2e:	8019      	strh	r1, [r3, #0]

  command[3] = (uint8_t) device;
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	72fb      	strb	r3, [r7, #11]
  command[4] = number >> 8;
 8000b34:	88bb      	ldrh	r3, [r7, #4]
 8000b36:	0a1b      	lsrs	r3, r3, #8
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	733b      	strb	r3, [r7, #12]
  command[5] = number & 0xff;
 8000b3e:	88bb      	ldrh	r3, [r7, #4]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	737b      	strb	r3, [r7, #13]
  sendCommand_nocrc(command, 6);
 8000b44:	f107 0308 	add.w	r3, r7, #8
 8000b48:	2106      	movs	r1, #6
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fd41 	bl	80005d2 <sendCommand_nocrc>
}
 8000b50:	bf00      	nop
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	08002904 	.word	0x08002904

08000b5c <interludeSpecifiedDevicePath>:
       		 Note from the manual: "Music interlude" only has level 1. Continuous
       		 interlude will cover the previous interlude (the interlude will be
       	 	 played immediately). When the interlude is finished, it will return to
       		 the first interlude breakpoint and continue to play.
********************************************************************************/
void interludeSpecifiedDevicePath(device_t device, char *path) {
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	6039      	str	r1, [r7, #0]
 8000b66:	71fb      	strb	r3, [r7, #7]
  DYPlayer.byPathCommand(0x17, device, path);
 8000b68:	4c04      	ldr	r4, [pc, #16]	; (8000b7c <interludeSpecifiedDevicePath+0x20>)
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	683a      	ldr	r2, [r7, #0]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	2017      	movs	r0, #23
 8000b72:	47a0      	blx	r4
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd90      	pop	{r4, r7, pc}
 8000b7c:	08000671 	.word	0x08000671

08000b80 <stopInterlude>:
  @param   : void
  @return  : void
  @date	   : 30.11.22
  @brief   : Stop the interlude and continue playing.
********************************************************************************/
void stopInterlude(void) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /*
  uint8_t command[3] = {0xaa, 0x10, 0x00};
  sendCommand(command, 3, 0xba);
  */
  sendCommand( &controlCommands[STOP_PLAYING][0]             ,
 8000b84:	23ba      	movs	r3, #186	; 0xba
 8000b86:	461a      	mov	r2, r3
 8000b88:	2103      	movs	r1, #3
 8000b8a:	4802      	ldr	r0, [pc, #8]	; (8000b94 <stopInterlude+0x14>)
 8000b8c:	f7ff fd3b 	bl	8000606 <sendCommand>
			   LENGTHOF_COMMANDS				  		   ,
			   controlCommands[STOP_PLAYING][CMD_CRC_INDEX] );
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	080029c8 	.word	0x080029c8

08000b98 <setCycleMode>:
  @param   : play_mode_t mode
  @return  : void
  @date	   : 30.11.22
  @brief   : Sets the cycle mode
********************************************************************************/
void setCycleMode(play_mode_t mode) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  /*
  uint8_t command[4] = { 0xaa, 0x18, 0x01, 0x00 };
  */
  uint8_t command[4] = {0};
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]

  memcpy( &command[0] ,
 8000ba6:	f107 030c 	add.w	r3, r7, #12
 8000baa:	2203      	movs	r2, #3
 8000bac:	4907      	ldr	r1, [pc, #28]	; (8000bcc <setCycleMode+0x34>)
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f001 fe86 	bl	80028c0 <memcpy>
		  &controlCommands[SETLOOPMODE_CMD][0],
		  LENGTHOF_COMMANDS);

  command[3] = mode;
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	73fb      	strb	r3, [r7, #15]
  sendCommand_nocrc(command, 4);
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fd07 	bl	80005d2 <sendCommand_nocrc>
}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	080029ec 	.word	0x080029ec

08000bd0 <setCycleTimes>:
  @param   : uint16_t cycles
  @return  : void
  @date	   : 30.11.22
  @brief   : Set how many cycles to play when in cycle modes 0, 1 or 4
********************************************************************************/
void setCycleTimes(uint16_t cycles) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
  /*
  uint8_t command[5] = { 0xaa, 0x19, 0x02, 0x00, 0x00 };
  */

  uint8_t command[5] = {0};
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	2300      	movs	r3, #0
 8000be0:	733b      	strb	r3, [r7, #12]

  memcpy( &command[0] ,
 8000be2:	f107 0308 	add.w	r3, r7, #8
 8000be6:	2203      	movs	r2, #3
 8000be8:	490a      	ldr	r1, [pc, #40]	; (8000c14 <setCycleTimes+0x44>)
 8000bea:	4618      	mov	r0, r3
 8000bec:	f001 fe68 	bl	80028c0 <memcpy>
		  &controlCommands[SETCYCTIMES_CMD][0],
		  LENGTHOF_COMMANDS);

  command[3] = cycles >> 8;
 8000bf0:	88fb      	ldrh	r3, [r7, #6]
 8000bf2:	0a1b      	lsrs	r3, r3, #8
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	72fb      	strb	r3, [r7, #11]
  command[4] = cycles & 0xff;
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	733b      	strb	r3, [r7, #12]
  sendCommand_nocrc(command, 5);
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	2105      	movs	r1, #5
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fce3 	bl	80005d2 <sendCommand_nocrc>
}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	080029f0 	.word	0x080029f0

08000c18 <setEq>:
  @param   : eq_t eq
  @return  : void
  @date	   : 30.11.22
  @brief   : Set the equalizer setting.
********************************************************************************/
void setEq(eq_t eq) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
  /*
   uint8_t command[4] = { 0xaa, 0x1a, 0x01, 0x00 };
   */

  uint8_t command[4] = {0};
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]

  memcpy( &command[0] ,
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	4907      	ldr	r1, [pc, #28]	; (8000c4c <setEq+0x34>)
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 fe46 	bl	80028c0 <memcpy>
		  &controlCommands[SETEQ_CMD][0],
		  LENGTHOF_COMMANDS);

  command[3] = (uint8_t) eq;
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	73fb      	strb	r3, [r7, #15]
  sendCommand_nocrc(command, 4);
 8000c38:	f107 030c 	add.w	r3, r7, #12
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fcc7 	bl	80005d2 <sendCommand_nocrc>
}
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	080029f4 	.word	0x080029f4

08000c50 <select>:
  @param   : uint16_t number
  @return  : void
  @date	   : 30.11.22
  @brief   : Select a sound file without playing it.  e.g. `1` for `00001.mp3`.
********************************************************************************/
void select(uint16_t number) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	80fb      	strh	r3, [r7, #6]
  /*
  uint8_t command[5] = { 0xaa, 0x1f, 0x02, 0x00, 0x00};
  */

  uint8_t command[5] = {0};
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	2300      	movs	r3, #0
 8000c60:	733b      	strb	r3, [r7, #12]

  memcpy( &command[0] ,
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	2203      	movs	r2, #3
 8000c68:	490a      	ldr	r1, [pc, #40]	; (8000c94 <select+0x44>)
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 fe28 	bl	80028c0 <memcpy>
		  &controlCommands[SLCTBUTNOPLAY_CMD][0],
		  LENGTHOF_COMMANDS);

  command[3] = number >> 8;
 8000c70:	88fb      	ldrh	r3, [r7, #6]
 8000c72:	0a1b      	lsrs	r3, r3, #8
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	72fb      	strb	r3, [r7, #11]
  command[4] = number & 0xff;
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	733b      	strb	r3, [r7, #12]
  sendCommand_nocrc(command, 5);
 8000c80:	f107 0308 	add.w	r3, r7, #8
 8000c84:	2105      	movs	r1, #5
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fca3 	bl	80005d2 <sendCommand_nocrc>
}
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	08002a0c 	.word	0x08002a0c

08000c98 <combinationPlay>:
             pass them as an array pointer. You need to put the files into a
             directory that can be called `DY`, `ZH or `XY`, you will have to check
             the manual that came with your module, or try all of them. There may
             well be more combinations! Also see
********************************************************************************/
void combinationPlay(char *sounds[], uint8_t len) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	70fb      	strb	r3, [r7, #3]
  if (len < 1) return;
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d040      	beq.n	8000d2c <combinationPlay+0x94>
  // This part of the command can be easily determined already.
  uint8_t command[3] = { 0xaa, 0x1b, 0x00 };
 8000caa:	4a22      	ldr	r2, [pc, #136]	; (8000d34 <combinationPlay+0x9c>)
 8000cac:	f107 0308 	add.w	r3, r7, #8
 8000cb0:	6812      	ldr	r2, [r2, #0]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	8019      	strh	r1, [r3, #0]
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	0c12      	lsrs	r2, r2, #16
 8000cba:	701a      	strb	r2, [r3, #0]
  command[2] = len * 2;
 8000cbc:	78fb      	ldrb	r3, [r7, #3]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	72bb      	strb	r3, [r7, #10]
  // Depends on the length, checksum is a sum so we can add the other values
  // later.
  uint8_t crc = checksum(command, 3);
 8000cc4:	f107 0308 	add.w	r3, r7, #8
 8000cc8:	2103      	movs	r1, #3
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fc42 	bl	8000554 <checksum>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	73fb      	strb	r3, [r7, #15]
  // Send the command and length already.
  serialWrite(command, 3);
 8000cd4:	f107 0308 	add.w	r3, r7, #8
 8000cd8:	2103      	movs	r1, #3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fbfe 	bl	80004dc <serialWrite>
  // Send each pair of chars containing the file name and add the values of
  // each char to the crc.
  for (uint8_t i=0; i < len; i++) {
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	73bb      	strb	r3, [r7, #14]
 8000ce4:	e019      	b.n	8000d1a <combinationPlay+0x82>
    crc += checksum((uint8_t*) sounds[i], 2);
 8000ce6:	7bbb      	ldrb	r3, [r7, #14]
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fc2e 	bl	8000554 <checksum>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	4413      	add	r3, r2
 8000d00:	73fb      	strb	r3, [r7, #15]
    serialWrite((uint8_t*) sounds[i], 2);
 8000d02:	7bbb      	ldrb	r3, [r7, #14]
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fbe4 	bl	80004dc <serialWrite>
  for (uint8_t i=0; i < len; i++) {
 8000d14:	7bbb      	ldrb	r3, [r7, #14]
 8000d16:	3301      	adds	r3, #1
 8000d18:	73bb      	strb	r3, [r7, #14]
 8000d1a:	7bba      	ldrb	r2, [r7, #14]
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d3e1      	bcc.n	8000ce6 <combinationPlay+0x4e>
  }
  // Lastly, write the crc value.
  serialWrite_crc(crc);
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fbed 	bl	8000504 <serialWrite_crc>
 8000d2a:	e000      	b.n	8000d2e <combinationPlay+0x96>
  if (len < 1) return;
 8000d2c:	bf00      	nop
}
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	0800290c 	.word	0x0800290c

08000d38 <endCombinationPlay>:
  @param   : void
  @return  : void
  @date	   : 30.11.2022
  @brief   : End combination play.
********************************************************************************/
void endCombinationPlay(void) {
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
  uint8_t command[3] = {0xaa, 0x1c, 0x00};
 8000d3e:	4a09      	ldr	r2, [pc, #36]	; (8000d64 <endCombinationPlay+0x2c>)
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	6812      	ldr	r2, [r2, #0]
 8000d44:	4611      	mov	r1, r2
 8000d46:	8019      	strh	r1, [r3, #0]
 8000d48:	3302      	adds	r3, #2
 8000d4a:	0c12      	lsrs	r2, r2, #16
 8000d4c:	701a      	strb	r2, [r3, #0]
  DYPlayer.sendCommand(command, 3, 0xc6);
 8000d4e:	4c06      	ldr	r4, [pc, #24]	; (8000d68 <endCombinationPlay+0x30>)
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	22c6      	movs	r2, #198	; 0xc6
 8000d54:	2103      	movs	r1, #3
 8000d56:	4618      	mov	r0, r3
 8000d58:	47a0      	blx	r4
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd90      	pop	{r4, r7, pc}
 8000d62:	bf00      	nop
 8000d64:	08002910 	.word	0x08002910
 8000d68:	08000607 	.word	0x08000607

08000d6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d70:	f000 f9ae 	bl	80010d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d74:	f000 f820 	bl	8000db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d78:	f000 f8a6 	bl	8000ec8 <MX_GPIO_Init>
  MX_UART4_Init();
 8000d7c:	f000 f87a 	bl	8000e74 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  DYPlayer.setVolume(15);
 8000d80:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <main+0x44>)
 8000d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d84:	200f      	movs	r0, #15
 8000d86:	4798      	blx	r3
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	DYPlayer.playSpecifiedDevicePath(Sd , &path[0]);
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <main+0x44>)
 8000d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8c:	4909      	ldr	r1, [pc, #36]	; (8000db4 <main+0x48>)
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4798      	blx	r3
	DYPlayer.play();
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <main+0x44>)
 8000d94:	691b      	ldr	r3, [r3, #16]
 8000d96:	4798      	blx	r3
	DYPlayer.checkPlayState();
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <main+0x44>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	4798      	blx	r3
	DYPlayer.getPlayingDevice();
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <main+0x44>)
 8000da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da2:	4798      	blx	r3
	HAL_Delay(5000);
 8000da4:	f241 3088 	movw	r0, #5000	; 0x1388
 8000da8:	f000 fa04 	bl	80011b4 <HAL_Delay>
	DYPlayer.playSpecifiedDevicePath(Sd , &path[0]);
 8000dac:	e7ec      	b.n	8000d88 <main+0x1c>
 8000dae:	bf00      	nop
 8000db0:	08002914 	.word	0x08002914
 8000db4:	2000000c 	.word	0x2000000c

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b094      	sub	sp, #80	; 0x50
 8000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 0320 	add.w	r3, r7, #32
 8000dc2:	2230      	movs	r2, #48	; 0x30
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 fd88 	bl	80028dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <SystemClock_Config+0xb4>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <SystemClock_Config+0xb4>)
 8000de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dea:	6413      	str	r3, [r2, #64]	; 0x40
 8000dec:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <SystemClock_Config+0xb4>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <SystemClock_Config+0xb8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a1b      	ldr	r2, [pc, #108]	; (8000e70 <SystemClock_Config+0xb8>)
 8000e02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <SystemClock_Config+0xb8>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e14:	2302      	movs	r3, #2
 8000e16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e1c:	2310      	movs	r3, #16
 8000e1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e24:	f107 0320 	add.w	r3, r7, #32
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 fc69 	bl	8001700 <HAL_RCC_OscConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000e34:	f000 f870 	bl	8000f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e38:	230f      	movs	r3, #15
 8000e3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 fecc 	bl	8001bf0 <HAL_RCC_ClockConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e5e:	f000 f85b 	bl	8000f18 <Error_Handler>
  }
}
 8000e62:	bf00      	nop
 8000e64:	3750      	adds	r7, #80	; 0x50
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40007000 	.word	0x40007000

08000e74 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <MX_UART4_Init+0x4c>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <MX_UART4_Init+0x50>)
 8000e7c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <MX_UART4_Init+0x4c>)
 8000e80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e84:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <MX_UART4_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <MX_UART4_Init+0x4c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <MX_UART4_Init+0x4c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <MX_UART4_Init+0x4c>)
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <MX_UART4_Init+0x4c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_UART4_Init+0x4c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_UART4_Init+0x4c>)
 8000eac:	f001 f880 	bl	8001fb0 <HAL_UART_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000eb6:	f000 f82f 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000034 	.word	0x20000034
 8000ec4:	40004c00 	.word	0x40004c00

08000ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <MX_GPIO_Init+0x4c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <MX_GPIO_Init+0x4c>)
 8000ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <MX_GPIO_Init+0x4c>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	603b      	str	r3, [r7, #0]
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <MX_GPIO_Init+0x4c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a08      	ldr	r2, [pc, #32]	; (8000f14 <MX_GPIO_Init+0x4c>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <MX_GPIO_Init+0x4c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]

}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <Error_Handler+0x8>
	...

08000f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <HAL_MspInit+0x4c>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	4a0f      	ldr	r2, [pc, #60]	; (8000f70 <HAL_MspInit+0x4c>)
 8000f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f38:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <HAL_MspInit+0x4c>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_MspInit+0x4c>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	4a08      	ldr	r2, [pc, #32]	; (8000f70 <HAL_MspInit+0x4c>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f54:	6413      	str	r3, [r2, #64]	; 0x40
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_MspInit+0x4c>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800

08000f74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a19      	ldr	r2, [pc, #100]	; (8000ff8 <HAL_UART_MspInit+0x84>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d12b      	bne.n	8000fee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <HAL_UART_MspInit+0x88>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <HAL_UART_MspInit+0x88>)
 8000fa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <HAL_UART_MspInit+0x88>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <HAL_UART_MspInit+0x88>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a10      	ldr	r2, [pc, #64]	; (8000ffc <HAL_UART_MspInit+0x88>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <HAL_UART_MspInit+0x88>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000fde:	2308      	movs	r3, #8
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <HAL_UART_MspInit+0x8c>)
 8000fea:	f000 f9ed 	bl	80013c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000fee:	bf00      	nop
 8000ff0:	3728      	adds	r7, #40	; 0x28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40004c00 	.word	0x40004c00
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020000 	.word	0x40020000

08001004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <NMI_Handler+0x4>

0800100a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <HardFault_Handler+0x4>

08001010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <MemManage_Handler+0x4>

08001016 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <BusFault_Handler+0x4>

0800101c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <UsageFault_Handler+0x4>

08001022 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001050:	f000 f890 	bl	8001174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}

08001058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <SystemInit+0x20>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <SystemInit+0x20>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800107c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001082:	490e      	ldr	r1, [pc, #56]	; (80010bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001084:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001098:	4c0b      	ldr	r4, [pc, #44]	; (80010c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010a6:	f7ff ffd7 	bl	8001058 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010aa:	f001 fbe5 	bl	8002878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ae:	f7ff fe5d 	bl	8000d6c <main>
  bx  lr    
 80010b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010c0:	08002b3c 	.word	0x08002b3c
  ldr r2, =_sbss
 80010c4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80010c8:	2000007c 	.word	0x2000007c

080010cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC_IRQHandler>
	...

080010d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <HAL_Init+0x40>)
 80010da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <HAL_Init+0x40>)
 80010e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a07      	ldr	r2, [pc, #28]	; (8001110 <HAL_Init+0x40>)
 80010f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f8:	2003      	movs	r0, #3
 80010fa:	f000 f931 	bl	8001360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fe:	200f      	movs	r0, #15
 8001100:	f000 f808 	bl	8001114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001104:	f7ff ff0e 	bl	8000f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023c00 	.word	0x40023c00

08001114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_InitTick+0x54>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_InitTick+0x58>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	fbb3 f3f1 	udiv	r3, r3, r1
 800112e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f93b 	bl	80013ae <HAL_SYSTICK_Config>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e00e      	b.n	8001160 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b0f      	cmp	r3, #15
 8001146:	d80a      	bhi.n	800115e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001148:	2200      	movs	r2, #0
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f000 f911 	bl	8001376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001154:	4a06      	ldr	r2, [pc, #24]	; (8001170 <HAL_InitTick+0x5c>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	e000      	b.n	8001160 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000000 	.word	0x20000000
 800116c:	20000008 	.word	0x20000008
 8001170:	20000004 	.word	0x20000004

08001174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x20>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x24>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4413      	add	r3, r2
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <HAL_IncTick+0x24>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000008 	.word	0x20000008
 8001198:	20000078 	.word	0x20000078

0800119c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <HAL_GetTick+0x14>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000078 	.word	0x20000078

080011b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011bc:	f7ff ffee 	bl	800119c <HAL_GetTick>
 80011c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011cc:	d005      	beq.n	80011da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <HAL_Delay+0x44>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011da:	bf00      	nop
 80011dc:	f7ff ffde 	bl	800119c <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d8f7      	bhi.n	80011dc <HAL_Delay+0x28>
  {
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000008 	.word	0x20000008

080011fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800122c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <__NVIC_SetPriorityGrouping+0x44>)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	60d3      	str	r3, [r2, #12]
}
 8001234:	bf00      	nop
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <__NVIC_GetPriorityGrouping+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	f003 0307 	and.w	r3, r3, #7
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001270:	2b00      	cmp	r3, #0
 8001272:	db0a      	blt.n	800128a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	490c      	ldr	r1, [pc, #48]	; (80012ac <__NVIC_SetPriority+0x4c>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440b      	add	r3, r1
 8001284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001288:	e00a      	b.n	80012a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4908      	ldr	r1, [pc, #32]	; (80012b0 <__NVIC_SetPriority+0x50>)
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	3b04      	subs	r3, #4
 8001298:	0112      	lsls	r2, r2, #4
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	440b      	add	r3, r1
 800129e:	761a      	strb	r2, [r3, #24]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000e100 	.word	0xe000e100
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	; 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f1c3 0307 	rsb	r3, r3, #7
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	bf28      	it	cs
 80012d2:	2304      	movcs	r3, #4
 80012d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3304      	adds	r3, #4
 80012da:	2b06      	cmp	r3, #6
 80012dc:	d902      	bls.n	80012e4 <NVIC_EncodePriority+0x30>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3b03      	subs	r3, #3
 80012e2:	e000      	b.n	80012e6 <NVIC_EncodePriority+0x32>
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	401a      	ands	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	43d9      	mvns	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	4313      	orrs	r3, r2
         );
}
 800130e:	4618      	mov	r0, r3
 8001310:	3724      	adds	r7, #36	; 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800132c:	d301      	bcc.n	8001332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132e:	2301      	movs	r3, #1
 8001330:	e00f      	b.n	8001352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001332:	4a0a      	ldr	r2, [pc, #40]	; (800135c <SysTick_Config+0x40>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3b01      	subs	r3, #1
 8001338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133a:	210f      	movs	r1, #15
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f7ff ff8e 	bl	8001260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <SysTick_Config+0x40>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134a:	4b04      	ldr	r3, [pc, #16]	; (800135c <SysTick_Config+0x40>)
 800134c:	2207      	movs	r2, #7
 800134e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	e000e010 	.word	0xe000e010

08001360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff47 	bl	80011fc <__NVIC_SetPriorityGrouping>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001388:	f7ff ff5c 	bl	8001244 <__NVIC_GetPriorityGrouping>
 800138c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	68b9      	ldr	r1, [r7, #8]
 8001392:	6978      	ldr	r0, [r7, #20]
 8001394:	f7ff ff8e 	bl	80012b4 <NVIC_EncodePriority>
 8001398:	4602      	mov	r2, r0
 800139a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139e:	4611      	mov	r1, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff5d 	bl	8001260 <__NVIC_SetPriority>
}
 80013a6:	bf00      	nop
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ffb0 	bl	800131c <SysTick_Config>
 80013bc:	4603      	mov	r3, r0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	e16b      	b.n	80016bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013e4:	2201      	movs	r2, #1
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	f040 815a 	bne.w	80016b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	2b01      	cmp	r3, #1
 800140c:	d005      	beq.n	800141a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001416:	2b02      	cmp	r3, #2
 8001418:	d130      	bne.n	800147c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	2203      	movs	r2, #3
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	68da      	ldr	r2, [r3, #12]
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001450:	2201      	movs	r2, #1
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	091b      	lsrs	r3, r3, #4
 8001466:	f003 0201 	and.w	r2, r3, #1
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b03      	cmp	r3, #3
 8001486:	d017      	beq.n	80014b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d123      	bne.n	800150c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	08da      	lsrs	r2, r3, #3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3208      	adds	r2, #8
 80014cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	220f      	movs	r2, #15
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	691a      	ldr	r2, [r3, #16]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	08da      	lsrs	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3208      	adds	r2, #8
 8001506:	69b9      	ldr	r1, [r7, #24]
 8001508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	2203      	movs	r2, #3
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0203 	and.w	r2, r3, #3
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 80b4 	beq.w	80016b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b60      	ldr	r3, [pc, #384]	; (80016d4 <HAL_GPIO_Init+0x30c>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	4a5f      	ldr	r2, [pc, #380]	; (80016d4 <HAL_GPIO_Init+0x30c>)
 8001558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155c:	6453      	str	r3, [r2, #68]	; 0x44
 800155e:	4b5d      	ldr	r3, [pc, #372]	; (80016d4 <HAL_GPIO_Init+0x30c>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800156a:	4a5b      	ldr	r2, [pc, #364]	; (80016d8 <HAL_GPIO_Init+0x310>)
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	3302      	adds	r3, #2
 8001572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	220f      	movs	r2, #15
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a52      	ldr	r2, [pc, #328]	; (80016dc <HAL_GPIO_Init+0x314>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d02b      	beq.n	80015ee <HAL_GPIO_Init+0x226>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a51      	ldr	r2, [pc, #324]	; (80016e0 <HAL_GPIO_Init+0x318>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d025      	beq.n	80015ea <HAL_GPIO_Init+0x222>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a50      	ldr	r2, [pc, #320]	; (80016e4 <HAL_GPIO_Init+0x31c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d01f      	beq.n	80015e6 <HAL_GPIO_Init+0x21e>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a4f      	ldr	r2, [pc, #316]	; (80016e8 <HAL_GPIO_Init+0x320>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d019      	beq.n	80015e2 <HAL_GPIO_Init+0x21a>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4e      	ldr	r2, [pc, #312]	; (80016ec <HAL_GPIO_Init+0x324>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d013      	beq.n	80015de <HAL_GPIO_Init+0x216>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a4d      	ldr	r2, [pc, #308]	; (80016f0 <HAL_GPIO_Init+0x328>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d00d      	beq.n	80015da <HAL_GPIO_Init+0x212>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a4c      	ldr	r2, [pc, #304]	; (80016f4 <HAL_GPIO_Init+0x32c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d007      	beq.n	80015d6 <HAL_GPIO_Init+0x20e>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a4b      	ldr	r2, [pc, #300]	; (80016f8 <HAL_GPIO_Init+0x330>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d101      	bne.n	80015d2 <HAL_GPIO_Init+0x20a>
 80015ce:	2307      	movs	r3, #7
 80015d0:	e00e      	b.n	80015f0 <HAL_GPIO_Init+0x228>
 80015d2:	2308      	movs	r3, #8
 80015d4:	e00c      	b.n	80015f0 <HAL_GPIO_Init+0x228>
 80015d6:	2306      	movs	r3, #6
 80015d8:	e00a      	b.n	80015f0 <HAL_GPIO_Init+0x228>
 80015da:	2305      	movs	r3, #5
 80015dc:	e008      	b.n	80015f0 <HAL_GPIO_Init+0x228>
 80015de:	2304      	movs	r3, #4
 80015e0:	e006      	b.n	80015f0 <HAL_GPIO_Init+0x228>
 80015e2:	2303      	movs	r3, #3
 80015e4:	e004      	b.n	80015f0 <HAL_GPIO_Init+0x228>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e002      	b.n	80015f0 <HAL_GPIO_Init+0x228>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <HAL_GPIO_Init+0x228>
 80015ee:	2300      	movs	r3, #0
 80015f0:	69fa      	ldr	r2, [r7, #28]
 80015f2:	f002 0203 	and.w	r2, r2, #3
 80015f6:	0092      	lsls	r2, r2, #2
 80015f8:	4093      	lsls	r3, r2
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001600:	4935      	ldr	r1, [pc, #212]	; (80016d8 <HAL_GPIO_Init+0x310>)
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	089b      	lsrs	r3, r3, #2
 8001606:	3302      	adds	r3, #2
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800160e:	4b3b      	ldr	r3, [pc, #236]	; (80016fc <HAL_GPIO_Init+0x334>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001632:	4a32      	ldr	r2, [pc, #200]	; (80016fc <HAL_GPIO_Init+0x334>)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001638:	4b30      	ldr	r3, [pc, #192]	; (80016fc <HAL_GPIO_Init+0x334>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800165c:	4a27      	ldr	r2, [pc, #156]	; (80016fc <HAL_GPIO_Init+0x334>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001662:	4b26      	ldr	r3, [pc, #152]	; (80016fc <HAL_GPIO_Init+0x334>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	43db      	mvns	r3, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4013      	ands	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001686:	4a1d      	ldr	r2, [pc, #116]	; (80016fc <HAL_GPIO_Init+0x334>)
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800168c:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_GPIO_Init+0x334>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016b0:	4a12      	ldr	r2, [pc, #72]	; (80016fc <HAL_GPIO_Init+0x334>)
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3301      	adds	r3, #1
 80016ba:	61fb      	str	r3, [r7, #28]
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	2b0f      	cmp	r3, #15
 80016c0:	f67f ae90 	bls.w	80013e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop
 80016c8:	3724      	adds	r7, #36	; 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40013800 	.word	0x40013800
 80016dc:	40020000 	.word	0x40020000
 80016e0:	40020400 	.word	0x40020400
 80016e4:	40020800 	.word	0x40020800
 80016e8:	40020c00 	.word	0x40020c00
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40021400 	.word	0x40021400
 80016f4:	40021800 	.word	0x40021800
 80016f8:	40021c00 	.word	0x40021c00
 80016fc:	40013c00 	.word	0x40013c00

08001700 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e267      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d075      	beq.n	800180a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800171e:	4b88      	ldr	r3, [pc, #544]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b04      	cmp	r3, #4
 8001728:	d00c      	beq.n	8001744 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800172a:	4b85      	ldr	r3, [pc, #532]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001732:	2b08      	cmp	r3, #8
 8001734:	d112      	bne.n	800175c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001736:	4b82      	ldr	r3, [pc, #520]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800173e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001742:	d10b      	bne.n	800175c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001744:	4b7e      	ldr	r3, [pc, #504]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d05b      	beq.n	8001808 <HAL_RCC_OscConfig+0x108>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d157      	bne.n	8001808 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e242      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001764:	d106      	bne.n	8001774 <HAL_RCC_OscConfig+0x74>
 8001766:	4b76      	ldr	r3, [pc, #472]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a75      	ldr	r2, [pc, #468]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 800176c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e01d      	b.n	80017b0 <HAL_RCC_OscConfig+0xb0>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800177c:	d10c      	bne.n	8001798 <HAL_RCC_OscConfig+0x98>
 800177e:	4b70      	ldr	r3, [pc, #448]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a6f      	ldr	r2, [pc, #444]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 8001784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	4b6d      	ldr	r3, [pc, #436]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a6c      	ldr	r2, [pc, #432]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 8001790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e00b      	b.n	80017b0 <HAL_RCC_OscConfig+0xb0>
 8001798:	4b69      	ldr	r3, [pc, #420]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a68      	ldr	r2, [pc, #416]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 800179e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	4b66      	ldr	r3, [pc, #408]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a65      	ldr	r2, [pc, #404]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 80017aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d013      	beq.n	80017e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7ff fcf0 	bl	800119c <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c0:	f7ff fcec 	bl	800119c <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	; 0x64
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e207      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d2:	4b5b      	ldr	r3, [pc, #364]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0xc0>
 80017de:	e014      	b.n	800180a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fcdc 	bl	800119c <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff fcd8 	bl	800119c <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	; 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e1f3      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fa:	4b51      	ldr	r3, [pc, #324]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0xe8>
 8001806:	e000      	b.n	800180a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d063      	beq.n	80018de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001816:	4b4a      	ldr	r3, [pc, #296]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00b      	beq.n	800183a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001822:	4b47      	ldr	r3, [pc, #284]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800182a:	2b08      	cmp	r3, #8
 800182c:	d11c      	bne.n	8001868 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800182e:	4b44      	ldr	r3, [pc, #272]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d116      	bne.n	8001868 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183a:	4b41      	ldr	r3, [pc, #260]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d005      	beq.n	8001852 <HAL_RCC_OscConfig+0x152>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d001      	beq.n	8001852 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e1c7      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001852:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4937      	ldr	r1, [pc, #220]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 8001862:	4313      	orrs	r3, r2
 8001864:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001866:	e03a      	b.n	80018de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d020      	beq.n	80018b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001870:	4b34      	ldr	r3, [pc, #208]	; (8001944 <HAL_RCC_OscConfig+0x244>)
 8001872:	2201      	movs	r2, #1
 8001874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001876:	f7ff fc91 	bl	800119c <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800187e:	f7ff fc8d 	bl	800119c <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e1a8      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001890:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f0      	beq.n	800187e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189c:	4b28      	ldr	r3, [pc, #160]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	4925      	ldr	r1, [pc, #148]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	600b      	str	r3, [r1, #0]
 80018b0:	e015      	b.n	80018de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b2:	4b24      	ldr	r3, [pc, #144]	; (8001944 <HAL_RCC_OscConfig+0x244>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff fc70 	bl	800119c <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c0:	f7ff fc6c 	bl	800119c <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e187      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d2:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d036      	beq.n	8001958 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d016      	beq.n	8001920 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_RCC_OscConfig+0x248>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f8:	f7ff fc50 	bl	800119c <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001900:	f7ff fc4c 	bl	800119c <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e167      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_RCC_OscConfig+0x240>)
 8001914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x200>
 800191e:	e01b      	b.n	8001958 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_RCC_OscConfig+0x248>)
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001926:	f7ff fc39 	bl	800119c <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800192c:	e00e      	b.n	800194c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800192e:	f7ff fc35 	bl	800119c <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d907      	bls.n	800194c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e150      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
 8001940:	40023800 	.word	0x40023800
 8001944:	42470000 	.word	0x42470000
 8001948:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194c:	4b88      	ldr	r3, [pc, #544]	; (8001b70 <HAL_RCC_OscConfig+0x470>)
 800194e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1ea      	bne.n	800192e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 8097 	beq.w	8001a94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001966:	2300      	movs	r3, #0
 8001968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800196a:	4b81      	ldr	r3, [pc, #516]	; (8001b70 <HAL_RCC_OscConfig+0x470>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10f      	bne.n	8001996 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	4b7d      	ldr	r3, [pc, #500]	; (8001b70 <HAL_RCC_OscConfig+0x470>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a7c      	ldr	r2, [pc, #496]	; (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b7a      	ldr	r3, [pc, #488]	; (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001992:	2301      	movs	r3, #1
 8001994:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001996:	4b77      	ldr	r3, [pc, #476]	; (8001b74 <HAL_RCC_OscConfig+0x474>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d118      	bne.n	80019d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019a2:	4b74      	ldr	r3, [pc, #464]	; (8001b74 <HAL_RCC_OscConfig+0x474>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a73      	ldr	r2, [pc, #460]	; (8001b74 <HAL_RCC_OscConfig+0x474>)
 80019a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ae:	f7ff fbf5 	bl	800119c <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b6:	f7ff fbf1 	bl	800119c <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e10c      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c8:	4b6a      	ldr	r3, [pc, #424]	; (8001b74 <HAL_RCC_OscConfig+0x474>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d106      	bne.n	80019ea <HAL_RCC_OscConfig+0x2ea>
 80019dc:	4b64      	ldr	r3, [pc, #400]	; (8001b70 <HAL_RCC_OscConfig+0x470>)
 80019de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e0:	4a63      	ldr	r2, [pc, #396]	; (8001b70 <HAL_RCC_OscConfig+0x470>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6713      	str	r3, [r2, #112]	; 0x70
 80019e8:	e01c      	b.n	8001a24 <HAL_RCC_OscConfig+0x324>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b05      	cmp	r3, #5
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x30c>
 80019f2:	4b5f      	ldr	r3, [pc, #380]	; (8001b70 <HAL_RCC_OscConfig+0x470>)
 80019f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f6:	4a5e      	ldr	r2, [pc, #376]	; (8001b70 <HAL_RCC_OscConfig+0x470>)
 80019f8:	f043 0304 	orr.w	r3, r3, #4
 80019fc:	6713      	str	r3, [r2, #112]	; 0x70
 80019fe:	4b5c      	ldr	r3, [pc, #368]	; (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a02:	4a5b      	ldr	r2, [pc, #364]	; (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0a:	e00b      	b.n	8001a24 <HAL_RCC_OscConfig+0x324>
 8001a0c:	4b58      	ldr	r3, [pc, #352]	; (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a10:	4a57      	ldr	r2, [pc, #348]	; (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001a12:	f023 0301 	bic.w	r3, r3, #1
 8001a16:	6713      	str	r3, [r2, #112]	; 0x70
 8001a18:	4b55      	ldr	r3, [pc, #340]	; (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1c:	4a54      	ldr	r2, [pc, #336]	; (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001a1e:	f023 0304 	bic.w	r3, r3, #4
 8001a22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d015      	beq.n	8001a58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2c:	f7ff fbb6 	bl	800119c <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a32:	e00a      	b.n	8001a4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a34:	f7ff fbb2 	bl	800119c <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e0cb      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4a:	4b49      	ldr	r3, [pc, #292]	; (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0ee      	beq.n	8001a34 <HAL_RCC_OscConfig+0x334>
 8001a56:	e014      	b.n	8001a82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a58:	f7ff fba0 	bl	800119c <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a5e:	e00a      	b.n	8001a76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a60:	f7ff fb9c 	bl	800119c <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e0b5      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a76:	4b3e      	ldr	r3, [pc, #248]	; (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1ee      	bne.n	8001a60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a82:	7dfb      	ldrb	r3, [r7, #23]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d105      	bne.n	8001a94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a88:	4b39      	ldr	r3, [pc, #228]	; (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	4a38      	ldr	r2, [pc, #224]	; (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 80a1 	beq.w	8001be0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a9e:	4b34      	ldr	r3, [pc, #208]	; (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d05c      	beq.n	8001b64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d141      	bne.n	8001b36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab2:	4b31      	ldr	r3, [pc, #196]	; (8001b78 <HAL_RCC_OscConfig+0x478>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7ff fb70 	bl	800119c <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7ff fb6c 	bl	800119c <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e087      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad2:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69da      	ldr	r2, [r3, #28]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	019b      	lsls	r3, r3, #6
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	085b      	lsrs	r3, r3, #1
 8001af6:	3b01      	subs	r3, #1
 8001af8:	041b      	lsls	r3, r3, #16
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b00:	061b      	lsls	r3, r3, #24
 8001b02:	491b      	ldr	r1, [pc, #108]	; (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <HAL_RCC_OscConfig+0x478>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0e:	f7ff fb45 	bl	800119c <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b16:	f7ff fb41 	bl	800119c <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e05c      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCC_OscConfig+0x416>
 8001b34:	e054      	b.n	8001be0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <HAL_RCC_OscConfig+0x478>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fb2e 	bl	800119c <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b44:	f7ff fb2a 	bl	800119c <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e045      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_RCC_OscConfig+0x470>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x444>
 8001b62:	e03d      	b.n	8001be0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d107      	bne.n	8001b7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e038      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40007000 	.word	0x40007000
 8001b78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_RCC_OscConfig+0x4ec>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d028      	beq.n	8001bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d121      	bne.n	8001bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d11a      	bne.n	8001bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bac:	4013      	ands	r3, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d111      	bne.n	8001bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc2:	085b      	lsrs	r3, r3, #1
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d107      	bne.n	8001bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800

08001bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0cc      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c04:	4b68      	ldr	r3, [pc, #416]	; (8001da8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d90c      	bls.n	8001c2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b65      	ldr	r3, [pc, #404]	; (8001da8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	4b63      	ldr	r3, [pc, #396]	; (8001da8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0b8      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d020      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c44:	4b59      	ldr	r3, [pc, #356]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	4a58      	ldr	r2, [pc, #352]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c5c:	4b53      	ldr	r3, [pc, #332]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	4a52      	ldr	r2, [pc, #328]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c68:	4b50      	ldr	r3, [pc, #320]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	494d      	ldr	r1, [pc, #308]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d044      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d107      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8e:	4b47      	ldr	r3, [pc, #284]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d119      	bne.n	8001cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e07f      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d003      	beq.n	8001cae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	d107      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cae:	4b3f      	ldr	r3, [pc, #252]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d109      	bne.n	8001cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e06f      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbe:	4b3b      	ldr	r3, [pc, #236]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e067      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cce:	4b37      	ldr	r3, [pc, #220]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f023 0203 	bic.w	r2, r3, #3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	4934      	ldr	r1, [pc, #208]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce0:	f7ff fa5c 	bl	800119c <HAL_GetTick>
 8001ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce8:	f7ff fa58 	bl	800119c <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e04f      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfe:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 020c 	and.w	r2, r3, #12
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d1eb      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d10:	4b25      	ldr	r3, [pc, #148]	; (8001da8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d20c      	bcs.n	8001d38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1e:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d26:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e032      	b.n	8001d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d008      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d44:	4b19      	ldr	r3, [pc, #100]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	4916      	ldr	r1, [pc, #88]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d009      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	490e      	ldr	r1, [pc, #56]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d76:	f000 f821 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	490a      	ldr	r1, [pc, #40]	; (8001db0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	5ccb      	ldrb	r3, [r1, r3]
 8001d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8e:	4a09      	ldr	r2, [pc, #36]	; (8001db4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff f9bc 	bl	8001114 <HAL_InitTick>

  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40023c00 	.word	0x40023c00
 8001dac:	40023800 	.word	0x40023800
 8001db0:	08002a10 	.word	0x08002a10
 8001db4:	20000000 	.word	0x20000000
 8001db8:	20000004 	.word	0x20000004

08001dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dc0:	b090      	sub	sp, #64	; 0x40
 8001dc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8001dc8:	2300      	movs	r3, #0
 8001dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dcc:	2300      	movs	r3, #0
 8001dce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dd4:	4b59      	ldr	r3, [pc, #356]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 030c 	and.w	r3, r3, #12
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d00d      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0x40>
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	f200 80a1 	bhi.w	8001f28 <HAL_RCC_GetSysClockFreq+0x16c>
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d002      	beq.n	8001df0 <HAL_RCC_GetSysClockFreq+0x34>
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d003      	beq.n	8001df6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dee:	e09b      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001df0:	4b53      	ldr	r3, [pc, #332]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x184>)
 8001df2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001df4:	e09b      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001df6:	4b53      	ldr	r3, [pc, #332]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x188>)
 8001df8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dfa:	e098      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dfc:	4b4f      	ldr	r3, [pc, #316]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e04:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e06:	4b4d      	ldr	r3, [pc, #308]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d028      	beq.n	8001e64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e12:	4b4a      	ldr	r3, [pc, #296]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	099b      	lsrs	r3, r3, #6
 8001e18:	2200      	movs	r2, #0
 8001e1a:	623b      	str	r3, [r7, #32]
 8001e1c:	627a      	str	r2, [r7, #36]	; 0x24
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e24:	2100      	movs	r1, #0
 8001e26:	4b47      	ldr	r3, [pc, #284]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e28:	fb03 f201 	mul.w	r2, r3, r1
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	fb00 f303 	mul.w	r3, r0, r3
 8001e32:	4413      	add	r3, r2
 8001e34:	4a43      	ldr	r2, [pc, #268]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e36:	fba0 1202 	umull	r1, r2, r0, r2
 8001e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e3c:	460a      	mov	r2, r1
 8001e3e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e42:	4413      	add	r3, r2
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e48:	2200      	movs	r2, #0
 8001e4a:	61bb      	str	r3, [r7, #24]
 8001e4c:	61fa      	str	r2, [r7, #28]
 8001e4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e56:	f7fe f9bf 	bl	80001d8 <__aeabi_uldivmod>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4613      	mov	r3, r2
 8001e60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e62:	e053      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e64:	4b35      	ldr	r3, [pc, #212]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	099b      	lsrs	r3, r3, #6
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	617a      	str	r2, [r7, #20]
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e76:	f04f 0b00 	mov.w	fp, #0
 8001e7a:	4652      	mov	r2, sl
 8001e7c:	465b      	mov	r3, fp
 8001e7e:	f04f 0000 	mov.w	r0, #0
 8001e82:	f04f 0100 	mov.w	r1, #0
 8001e86:	0159      	lsls	r1, r3, #5
 8001e88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e8c:	0150      	lsls	r0, r2, #5
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	ebb2 080a 	subs.w	r8, r2, sl
 8001e96:	eb63 090b 	sbc.w	r9, r3, fp
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ea6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001eaa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001eae:	ebb2 0408 	subs.w	r4, r2, r8
 8001eb2:	eb63 0509 	sbc.w	r5, r3, r9
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	00eb      	lsls	r3, r5, #3
 8001ec0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ec4:	00e2      	lsls	r2, r4, #3
 8001ec6:	4614      	mov	r4, r2
 8001ec8:	461d      	mov	r5, r3
 8001eca:	eb14 030a 	adds.w	r3, r4, sl
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	eb45 030b 	adc.w	r3, r5, fp
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ee2:	4629      	mov	r1, r5
 8001ee4:	028b      	lsls	r3, r1, #10
 8001ee6:	4621      	mov	r1, r4
 8001ee8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001eec:	4621      	mov	r1, r4
 8001eee:	028a      	lsls	r2, r1, #10
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	60fa      	str	r2, [r7, #12]
 8001efc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f00:	f7fe f96a 	bl	80001d8 <__aeabi_uldivmod>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4613      	mov	r3, r2
 8001f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	0c1b      	lsrs	r3, r3, #16
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	3301      	adds	r3, #1
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001f1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f26:	e002      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3740      	adds	r7, #64	; 0x40
 8001f34:	46bd      	mov	sp, r7
 8001f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	00f42400 	.word	0x00f42400
 8001f44:	017d7840 	.word	0x017d7840

08001f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20000000 	.word	0x20000000

08001f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f64:	f7ff fff0 	bl	8001f48 <HAL_RCC_GetHCLKFreq>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	0a9b      	lsrs	r3, r3, #10
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	4903      	ldr	r1, [pc, #12]	; (8001f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f76:	5ccb      	ldrb	r3, [r1, r3]
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40023800 	.word	0x40023800
 8001f84:	08002a20 	.word	0x08002a20

08001f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f8c:	f7ff ffdc 	bl	8001f48 <HAL_RCC_GetHCLKFreq>
 8001f90:	4602      	mov	r2, r0
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	0b5b      	lsrs	r3, r3, #13
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	4903      	ldr	r1, [pc, #12]	; (8001fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f9e:	5ccb      	ldrb	r3, [r1, r3]
 8001fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	08002a20 	.word	0x08002a20

08001fb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e03f      	b.n	8002042 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d106      	bne.n	8001fdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7fe ffcc 	bl	8000f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2224      	movs	r2, #36	; 0x24
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ff2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f9cb 	bl	8002390 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	691a      	ldr	r2, [r3, #16]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002008:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695a      	ldr	r2, [r3, #20]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002018:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002028:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b08a      	sub	sp, #40	; 0x28
 800204e:	af02      	add	r7, sp, #8
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	603b      	str	r3, [r7, #0]
 8002056:	4613      	mov	r3, r2
 8002058:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b20      	cmp	r3, #32
 8002068:	d17c      	bne.n	8002164 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <HAL_UART_Transmit+0x2c>
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e075      	b.n	8002166 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_UART_Transmit+0x3e>
 8002084:	2302      	movs	r3, #2
 8002086:	e06e      	b.n	8002166 <HAL_UART_Transmit+0x11c>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2221      	movs	r2, #33	; 0x21
 800209a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800209e:	f7ff f87d 	bl	800119c <HAL_GetTick>
 80020a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	88fa      	ldrh	r2, [r7, #6]
 80020a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	88fa      	ldrh	r2, [r7, #6]
 80020ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b8:	d108      	bne.n	80020cc <HAL_UART_Transmit+0x82>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d104      	bne.n	80020cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	e003      	b.n	80020d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020dc:	e02a      	b.n	8002134 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2200      	movs	r2, #0
 80020e6:	2180      	movs	r1, #128	; 0x80
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 f8e2 	bl	80022b2 <UART_WaitOnFlagUntilTimeout>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e036      	b.n	8002166 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10b      	bne.n	8002116 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800210c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	3302      	adds	r3, #2
 8002112:	61bb      	str	r3, [r7, #24]
 8002114:	e007      	b.n	8002126 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	781a      	ldrb	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	3301      	adds	r3, #1
 8002124:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800212a:	b29b      	uxth	r3, r3
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002138:	b29b      	uxth	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1cf      	bne.n	80020de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2200      	movs	r2, #0
 8002146:	2140      	movs	r1, #64	; 0x40
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 f8b2 	bl	80022b2 <UART_WaitOnFlagUntilTimeout>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e006      	b.n	8002166 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	e000      	b.n	8002166 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002164:	2302      	movs	r3, #2
  }
}
 8002166:	4618      	mov	r0, r3
 8002168:	3720      	adds	r7, #32
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b08a      	sub	sp, #40	; 0x28
 8002172:	af02      	add	r7, sp, #8
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	603b      	str	r3, [r7, #0]
 800217a:	4613      	mov	r3, r2
 800217c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b20      	cmp	r3, #32
 800218c:	f040 808c 	bne.w	80022a8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <HAL_UART_Receive+0x2e>
 8002196:	88fb      	ldrh	r3, [r7, #6]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e084      	b.n	80022aa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <HAL_UART_Receive+0x40>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e07d      	b.n	80022aa <HAL_UART_Receive+0x13c>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2222      	movs	r2, #34	; 0x22
 80021c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021ca:	f7fe ffe7 	bl	800119c <HAL_GetTick>
 80021ce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	88fa      	ldrh	r2, [r7, #6]
 80021d4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	88fa      	ldrh	r2, [r7, #6]
 80021da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e4:	d108      	bne.n	80021f8 <HAL_UART_Receive+0x8a>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d104      	bne.n	80021f8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	e003      	b.n	8002200 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002208:	e043      	b.n	8002292 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2200      	movs	r2, #0
 8002212:	2120      	movs	r1, #32
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f000 f84c 	bl	80022b2 <UART_WaitOnFlagUntilTimeout>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e042      	b.n	80022aa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10c      	bne.n	8002244 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	b29b      	uxth	r3, r3
 8002232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002236:	b29a      	uxth	r2, r3
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	3302      	adds	r3, #2
 8002240:	61bb      	str	r3, [r7, #24]
 8002242:	e01f      	b.n	8002284 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800224c:	d007      	beq.n	800225e <HAL_UART_Receive+0xf0>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10a      	bne.n	800226c <HAL_UART_Receive+0xfe>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	b2da      	uxtb	r2, r3
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	e008      	b.n	800227e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002278:	b2da      	uxtb	r2, r3
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3301      	adds	r3, #1
 8002282:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002288:	b29b      	uxth	r3, r3
 800228a:	3b01      	subs	r3, #1
 800228c:	b29a      	uxth	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002296:	b29b      	uxth	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1b6      	bne.n	800220a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	e000      	b.n	80022aa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80022a8:	2302      	movs	r3, #2
  }
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3720      	adds	r7, #32
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b090      	sub	sp, #64	; 0x40
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	603b      	str	r3, [r7, #0]
 80022be:	4613      	mov	r3, r2
 80022c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022c2:	e050      	b.n	8002366 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ca:	d04c      	beq.n	8002366 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d007      	beq.n	80022e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80022d2:	f7fe ff63 	bl	800119c <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022de:	429a      	cmp	r2, r3
 80022e0:	d241      	bcs.n	8002366 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	330c      	adds	r3, #12
 80022e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ec:	e853 3f00 	ldrex	r3, [r3]
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	330c      	adds	r3, #12
 8002300:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002302:	637a      	str	r2, [r7, #52]	; 0x34
 8002304:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002306:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002308:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800230a:	e841 2300 	strex	r3, r2, [r1]
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1e5      	bne.n	80022e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	3314      	adds	r3, #20
 800231c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	e853 3f00 	ldrex	r3, [r3]
 8002324:	613b      	str	r3, [r7, #16]
   return(result);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	63bb      	str	r3, [r7, #56]	; 0x38
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	3314      	adds	r3, #20
 8002334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002336:	623a      	str	r2, [r7, #32]
 8002338:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800233a:	69f9      	ldr	r1, [r7, #28]
 800233c:	6a3a      	ldr	r2, [r7, #32]
 800233e:	e841 2300 	strex	r3, r2, [r1]
 8002342:	61bb      	str	r3, [r7, #24]
   return(result);
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1e5      	bne.n	8002316 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2220      	movs	r2, #32
 800234e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2220      	movs	r2, #32
 8002356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e00f      	b.n	8002386 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	4013      	ands	r3, r2
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	429a      	cmp	r2, r3
 8002374:	bf0c      	ite	eq
 8002376:	2301      	moveq	r3, #1
 8002378:	2300      	movne	r3, #0
 800237a:	b2db      	uxtb	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	429a      	cmp	r2, r3
 8002382:	d09f      	beq.n	80022c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3740      	adds	r7, #64	; 0x40
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002394:	b0c0      	sub	sp, #256	; 0x100
 8002396:	af00      	add	r7, sp, #0
 8002398:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800239c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80023a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ac:	68d9      	ldr	r1, [r3, #12]
 80023ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	ea40 0301 	orr.w	r3, r0, r1
 80023b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	431a      	orrs	r2, r3
 80023c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80023dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80023e8:	f021 010c 	bic.w	r1, r1, #12
 80023ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80023f6:	430b      	orrs	r3, r1
 80023f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800240a:	6999      	ldr	r1, [r3, #24]
 800240c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	ea40 0301 	orr.w	r3, r0, r1
 8002416:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	4b8f      	ldr	r3, [pc, #572]	; (800265c <UART_SetConfig+0x2cc>)
 8002420:	429a      	cmp	r2, r3
 8002422:	d005      	beq.n	8002430 <UART_SetConfig+0xa0>
 8002424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	4b8d      	ldr	r3, [pc, #564]	; (8002660 <UART_SetConfig+0x2d0>)
 800242c:	429a      	cmp	r2, r3
 800242e:	d104      	bne.n	800243a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002430:	f7ff fdaa 	bl	8001f88 <HAL_RCC_GetPCLK2Freq>
 8002434:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002438:	e003      	b.n	8002442 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800243a:	f7ff fd91 	bl	8001f60 <HAL_RCC_GetPCLK1Freq>
 800243e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800244c:	f040 810c 	bne.w	8002668 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002454:	2200      	movs	r2, #0
 8002456:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800245a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800245e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002462:	4622      	mov	r2, r4
 8002464:	462b      	mov	r3, r5
 8002466:	1891      	adds	r1, r2, r2
 8002468:	65b9      	str	r1, [r7, #88]	; 0x58
 800246a:	415b      	adcs	r3, r3
 800246c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800246e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002472:	4621      	mov	r1, r4
 8002474:	eb12 0801 	adds.w	r8, r2, r1
 8002478:	4629      	mov	r1, r5
 800247a:	eb43 0901 	adc.w	r9, r3, r1
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800248a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800248e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002492:	4690      	mov	r8, r2
 8002494:	4699      	mov	r9, r3
 8002496:	4623      	mov	r3, r4
 8002498:	eb18 0303 	adds.w	r3, r8, r3
 800249c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80024a0:	462b      	mov	r3, r5
 80024a2:	eb49 0303 	adc.w	r3, r9, r3
 80024a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80024aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80024b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80024ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80024be:	460b      	mov	r3, r1
 80024c0:	18db      	adds	r3, r3, r3
 80024c2:	653b      	str	r3, [r7, #80]	; 0x50
 80024c4:	4613      	mov	r3, r2
 80024c6:	eb42 0303 	adc.w	r3, r2, r3
 80024ca:	657b      	str	r3, [r7, #84]	; 0x54
 80024cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80024d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80024d4:	f7fd fe80 	bl	80001d8 <__aeabi_uldivmod>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4b61      	ldr	r3, [pc, #388]	; (8002664 <UART_SetConfig+0x2d4>)
 80024de:	fba3 2302 	umull	r2, r3, r3, r2
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	011c      	lsls	r4, r3, #4
 80024e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024ea:	2200      	movs	r2, #0
 80024ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80024f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80024f8:	4642      	mov	r2, r8
 80024fa:	464b      	mov	r3, r9
 80024fc:	1891      	adds	r1, r2, r2
 80024fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8002500:	415b      	adcs	r3, r3
 8002502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002504:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002508:	4641      	mov	r1, r8
 800250a:	eb12 0a01 	adds.w	sl, r2, r1
 800250e:	4649      	mov	r1, r9
 8002510:	eb43 0b01 	adc.w	fp, r3, r1
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002520:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002524:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002528:	4692      	mov	sl, r2
 800252a:	469b      	mov	fp, r3
 800252c:	4643      	mov	r3, r8
 800252e:	eb1a 0303 	adds.w	r3, sl, r3
 8002532:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002536:	464b      	mov	r3, r9
 8002538:	eb4b 0303 	adc.w	r3, fp, r3
 800253c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800254c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002550:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002554:	460b      	mov	r3, r1
 8002556:	18db      	adds	r3, r3, r3
 8002558:	643b      	str	r3, [r7, #64]	; 0x40
 800255a:	4613      	mov	r3, r2
 800255c:	eb42 0303 	adc.w	r3, r2, r3
 8002560:	647b      	str	r3, [r7, #68]	; 0x44
 8002562:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002566:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800256a:	f7fd fe35 	bl	80001d8 <__aeabi_uldivmod>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4611      	mov	r1, r2
 8002574:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <UART_SetConfig+0x2d4>)
 8002576:	fba3 2301 	umull	r2, r3, r3, r1
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	2264      	movs	r2, #100	; 0x64
 800257e:	fb02 f303 	mul.w	r3, r2, r3
 8002582:	1acb      	subs	r3, r1, r3
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800258a:	4b36      	ldr	r3, [pc, #216]	; (8002664 <UART_SetConfig+0x2d4>)
 800258c:	fba3 2302 	umull	r2, r3, r3, r2
 8002590:	095b      	lsrs	r3, r3, #5
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002598:	441c      	add	r4, r3
 800259a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800259e:	2200      	movs	r2, #0
 80025a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80025a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80025ac:	4642      	mov	r2, r8
 80025ae:	464b      	mov	r3, r9
 80025b0:	1891      	adds	r1, r2, r2
 80025b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80025b4:	415b      	adcs	r3, r3
 80025b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025bc:	4641      	mov	r1, r8
 80025be:	1851      	adds	r1, r2, r1
 80025c0:	6339      	str	r1, [r7, #48]	; 0x30
 80025c2:	4649      	mov	r1, r9
 80025c4:	414b      	adcs	r3, r1
 80025c6:	637b      	str	r3, [r7, #52]	; 0x34
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80025d4:	4659      	mov	r1, fp
 80025d6:	00cb      	lsls	r3, r1, #3
 80025d8:	4651      	mov	r1, sl
 80025da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025de:	4651      	mov	r1, sl
 80025e0:	00ca      	lsls	r2, r1, #3
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	4603      	mov	r3, r0
 80025e8:	4642      	mov	r2, r8
 80025ea:	189b      	adds	r3, r3, r2
 80025ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025f0:	464b      	mov	r3, r9
 80025f2:	460a      	mov	r2, r1
 80025f4:	eb42 0303 	adc.w	r3, r2, r3
 80025f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002608:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800260c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002610:	460b      	mov	r3, r1
 8002612:	18db      	adds	r3, r3, r3
 8002614:	62bb      	str	r3, [r7, #40]	; 0x28
 8002616:	4613      	mov	r3, r2
 8002618:	eb42 0303 	adc.w	r3, r2, r3
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800261e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002622:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002626:	f7fd fdd7 	bl	80001d8 <__aeabi_uldivmod>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <UART_SetConfig+0x2d4>)
 8002630:	fba3 1302 	umull	r1, r3, r3, r2
 8002634:	095b      	lsrs	r3, r3, #5
 8002636:	2164      	movs	r1, #100	; 0x64
 8002638:	fb01 f303 	mul.w	r3, r1, r3
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	3332      	adds	r3, #50	; 0x32
 8002642:	4a08      	ldr	r2, [pc, #32]	; (8002664 <UART_SetConfig+0x2d4>)
 8002644:	fba2 2303 	umull	r2, r3, r2, r3
 8002648:	095b      	lsrs	r3, r3, #5
 800264a:	f003 0207 	and.w	r2, r3, #7
 800264e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4422      	add	r2, r4
 8002656:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002658:	e105      	b.n	8002866 <UART_SetConfig+0x4d6>
 800265a:	bf00      	nop
 800265c:	40011000 	.word	0x40011000
 8002660:	40011400 	.word	0x40011400
 8002664:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800266c:	2200      	movs	r2, #0
 800266e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002672:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002676:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800267a:	4642      	mov	r2, r8
 800267c:	464b      	mov	r3, r9
 800267e:	1891      	adds	r1, r2, r2
 8002680:	6239      	str	r1, [r7, #32]
 8002682:	415b      	adcs	r3, r3
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
 8002686:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800268a:	4641      	mov	r1, r8
 800268c:	1854      	adds	r4, r2, r1
 800268e:	4649      	mov	r1, r9
 8002690:	eb43 0501 	adc.w	r5, r3, r1
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	00eb      	lsls	r3, r5, #3
 800269e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026a2:	00e2      	lsls	r2, r4, #3
 80026a4:	4614      	mov	r4, r2
 80026a6:	461d      	mov	r5, r3
 80026a8:	4643      	mov	r3, r8
 80026aa:	18e3      	adds	r3, r4, r3
 80026ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80026b0:	464b      	mov	r3, r9
 80026b2:	eb45 0303 	adc.w	r3, r5, r3
 80026b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80026ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80026c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80026d6:	4629      	mov	r1, r5
 80026d8:	008b      	lsls	r3, r1, #2
 80026da:	4621      	mov	r1, r4
 80026dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026e0:	4621      	mov	r1, r4
 80026e2:	008a      	lsls	r2, r1, #2
 80026e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80026e8:	f7fd fd76 	bl	80001d8 <__aeabi_uldivmod>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4b60      	ldr	r3, [pc, #384]	; (8002874 <UART_SetConfig+0x4e4>)
 80026f2:	fba3 2302 	umull	r2, r3, r3, r2
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	011c      	lsls	r4, r3, #4
 80026fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026fe:	2200      	movs	r2, #0
 8002700:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002704:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002708:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800270c:	4642      	mov	r2, r8
 800270e:	464b      	mov	r3, r9
 8002710:	1891      	adds	r1, r2, r2
 8002712:	61b9      	str	r1, [r7, #24]
 8002714:	415b      	adcs	r3, r3
 8002716:	61fb      	str	r3, [r7, #28]
 8002718:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800271c:	4641      	mov	r1, r8
 800271e:	1851      	adds	r1, r2, r1
 8002720:	6139      	str	r1, [r7, #16]
 8002722:	4649      	mov	r1, r9
 8002724:	414b      	adcs	r3, r1
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002734:	4659      	mov	r1, fp
 8002736:	00cb      	lsls	r3, r1, #3
 8002738:	4651      	mov	r1, sl
 800273a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800273e:	4651      	mov	r1, sl
 8002740:	00ca      	lsls	r2, r1, #3
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	4603      	mov	r3, r0
 8002748:	4642      	mov	r2, r8
 800274a:	189b      	adds	r3, r3, r2
 800274c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002750:	464b      	mov	r3, r9
 8002752:	460a      	mov	r2, r1
 8002754:	eb42 0303 	adc.w	r3, r2, r3
 8002758:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800275c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	67bb      	str	r3, [r7, #120]	; 0x78
 8002766:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002774:	4649      	mov	r1, r9
 8002776:	008b      	lsls	r3, r1, #2
 8002778:	4641      	mov	r1, r8
 800277a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800277e:	4641      	mov	r1, r8
 8002780:	008a      	lsls	r2, r1, #2
 8002782:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002786:	f7fd fd27 	bl	80001d8 <__aeabi_uldivmod>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4b39      	ldr	r3, [pc, #228]	; (8002874 <UART_SetConfig+0x4e4>)
 8002790:	fba3 1302 	umull	r1, r3, r3, r2
 8002794:	095b      	lsrs	r3, r3, #5
 8002796:	2164      	movs	r1, #100	; 0x64
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	3332      	adds	r3, #50	; 0x32
 80027a2:	4a34      	ldr	r2, [pc, #208]	; (8002874 <UART_SetConfig+0x4e4>)
 80027a4:	fba2 2303 	umull	r2, r3, r2, r3
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027ae:	441c      	add	r4, r3
 80027b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027b4:	2200      	movs	r2, #0
 80027b6:	673b      	str	r3, [r7, #112]	; 0x70
 80027b8:	677a      	str	r2, [r7, #116]	; 0x74
 80027ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80027be:	4642      	mov	r2, r8
 80027c0:	464b      	mov	r3, r9
 80027c2:	1891      	adds	r1, r2, r2
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	415b      	adcs	r3, r3
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027ce:	4641      	mov	r1, r8
 80027d0:	1851      	adds	r1, r2, r1
 80027d2:	6039      	str	r1, [r7, #0]
 80027d4:	4649      	mov	r1, r9
 80027d6:	414b      	adcs	r3, r1
 80027d8:	607b      	str	r3, [r7, #4]
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027e6:	4659      	mov	r1, fp
 80027e8:	00cb      	lsls	r3, r1, #3
 80027ea:	4651      	mov	r1, sl
 80027ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027f0:	4651      	mov	r1, sl
 80027f2:	00ca      	lsls	r2, r1, #3
 80027f4:	4610      	mov	r0, r2
 80027f6:	4619      	mov	r1, r3
 80027f8:	4603      	mov	r3, r0
 80027fa:	4642      	mov	r2, r8
 80027fc:	189b      	adds	r3, r3, r2
 80027fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8002800:	464b      	mov	r3, r9
 8002802:	460a      	mov	r2, r1
 8002804:	eb42 0303 	adc.w	r3, r2, r3
 8002808:	66fb      	str	r3, [r7, #108]	; 0x6c
 800280a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	663b      	str	r3, [r7, #96]	; 0x60
 8002814:	667a      	str	r2, [r7, #100]	; 0x64
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002822:	4649      	mov	r1, r9
 8002824:	008b      	lsls	r3, r1, #2
 8002826:	4641      	mov	r1, r8
 8002828:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800282c:	4641      	mov	r1, r8
 800282e:	008a      	lsls	r2, r1, #2
 8002830:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002834:	f7fd fcd0 	bl	80001d8 <__aeabi_uldivmod>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <UART_SetConfig+0x4e4>)
 800283e:	fba3 1302 	umull	r1, r3, r3, r2
 8002842:	095b      	lsrs	r3, r3, #5
 8002844:	2164      	movs	r1, #100	; 0x64
 8002846:	fb01 f303 	mul.w	r3, r1, r3
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	3332      	adds	r3, #50	; 0x32
 8002850:	4a08      	ldr	r2, [pc, #32]	; (8002874 <UART_SetConfig+0x4e4>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	f003 020f 	and.w	r2, r3, #15
 800285c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4422      	add	r2, r4
 8002864:	609a      	str	r2, [r3, #8]
}
 8002866:	bf00      	nop
 8002868:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800286c:	46bd      	mov	sp, r7
 800286e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002872:	bf00      	nop
 8002874:	51eb851f 	.word	0x51eb851f

08002878 <__libc_init_array>:
 8002878:	b570      	push	{r4, r5, r6, lr}
 800287a:	4d0d      	ldr	r5, [pc, #52]	; (80028b0 <__libc_init_array+0x38>)
 800287c:	4c0d      	ldr	r4, [pc, #52]	; (80028b4 <__libc_init_array+0x3c>)
 800287e:	1b64      	subs	r4, r4, r5
 8002880:	10a4      	asrs	r4, r4, #2
 8002882:	2600      	movs	r6, #0
 8002884:	42a6      	cmp	r6, r4
 8002886:	d109      	bne.n	800289c <__libc_init_array+0x24>
 8002888:	4d0b      	ldr	r5, [pc, #44]	; (80028b8 <__libc_init_array+0x40>)
 800288a:	4c0c      	ldr	r4, [pc, #48]	; (80028bc <__libc_init_array+0x44>)
 800288c:	f000 f82e 	bl	80028ec <_init>
 8002890:	1b64      	subs	r4, r4, r5
 8002892:	10a4      	asrs	r4, r4, #2
 8002894:	2600      	movs	r6, #0
 8002896:	42a6      	cmp	r6, r4
 8002898:	d105      	bne.n	80028a6 <__libc_init_array+0x2e>
 800289a:	bd70      	pop	{r4, r5, r6, pc}
 800289c:	f855 3b04 	ldr.w	r3, [r5], #4
 80028a0:	4798      	blx	r3
 80028a2:	3601      	adds	r6, #1
 80028a4:	e7ee      	b.n	8002884 <__libc_init_array+0xc>
 80028a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80028aa:	4798      	blx	r3
 80028ac:	3601      	adds	r6, #1
 80028ae:	e7f2      	b.n	8002896 <__libc_init_array+0x1e>
 80028b0:	08002b34 	.word	0x08002b34
 80028b4:	08002b34 	.word	0x08002b34
 80028b8:	08002b34 	.word	0x08002b34
 80028bc:	08002b38 	.word	0x08002b38

080028c0 <memcpy>:
 80028c0:	440a      	add	r2, r1
 80028c2:	4291      	cmp	r1, r2
 80028c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80028c8:	d100      	bne.n	80028cc <memcpy+0xc>
 80028ca:	4770      	bx	lr
 80028cc:	b510      	push	{r4, lr}
 80028ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028d6:	4291      	cmp	r1, r2
 80028d8:	d1f9      	bne.n	80028ce <memcpy+0xe>
 80028da:	bd10      	pop	{r4, pc}

080028dc <memset>:
 80028dc:	4402      	add	r2, r0
 80028de:	4603      	mov	r3, r0
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d100      	bne.n	80028e6 <memset+0xa>
 80028e4:	4770      	bx	lr
 80028e6:	f803 1b01 	strb.w	r1, [r3], #1
 80028ea:	e7f9      	b.n	80028e0 <memset+0x4>

080028ec <_init>:
 80028ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ee:	bf00      	nop
 80028f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028f2:	bc08      	pop	{r3}
 80028f4:	469e      	mov	lr, r3
 80028f6:	4770      	bx	lr

080028f8 <_fini>:
 80028f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fa:	bf00      	nop
 80028fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028fe:	bc08      	pop	{r3}
 8002900:	469e      	mov	lr, r3
 8002902:	4770      	bx	lr
